(* Generated by ocaml-tree-sitter. *)
(*
   apex grammar

   entrypoint: parser_output
*)

open! Sexplib.Conv
open Tree_sitter_run

type term = Token.t (* pattern "(\\\\\\'|[^'])+" *)
[@@deriving sexp_of]

type pat_ba503d3 = Token.t (* pattern [eE][xX][cC][lL][uU][dD][eE][sS] *)
[@@deriving sexp_of]

type date_time =
  Token.t (* pattern [1-4][0-9]{3}-(?:0[1-9]|1[0-2])-(?:[0-2][1-9]|[1-2]0|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d(?:\.\d\d?\d?)?(?:Z|[+-][0-1]\d:[0-5]\d) *)
[@@deriving sexp_of]

type pat_2539e50 = Token.t (* pattern [rR][eE][tT][uU][rR][nN] *)
[@@deriving sexp_of]

type pat_4735214 = Token.t (* pattern [sS][uU][pP][eE][rR] *)
[@@deriving sexp_of]

type pat_c5aab40 =
  Token.t (* pattern [nN][eE][xX][tT][__][fF][iI][sS][cC][aA][lL][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_ee0612c = Token.t (* pattern [tT][hH][iI][sS] *)
[@@deriving sexp_of]

type pat_46c2d71 = Token.t (* pattern [mM][aA][xX] *)
[@@deriving sexp_of]

type pat_c743a5d =
  Token.t (* pattern [nN][eE][xX][tT][__][99][00][__][dD][aA][yY][sS] *)
[@@deriving sexp_of]

type pat_4297c98 = Token.t (* pattern [dD][oO] *)
[@@deriving sexp_of]

type pat_87c7e19 = Token.t (* pattern [nN][oO][tT] *)
[@@deriving sexp_of]

type date =
  Token.t (* pattern [1-4][0-9]{3}-(?:0[1-9]|1[0-2])-(?:[0-2][1-9]|[1-2]0|3[0-1]) *)
[@@deriving sexp_of]

type pat_f300483 = Token.t (* pattern [tT][rR][iI][gG][gG][eE][rR] *)
[@@deriving sexp_of]

type pat_b69dfa5 = Token.t (* pattern [lL][aA][sS][tT][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_5f24f83 = Token.t (* pattern [fF][iI][eE][lL][dD][sS] *)
[@@deriving sexp_of]

type pat_81b900e = Token.t (* pattern [lL][iI][sS][tT][vV][iI][eE][wW] *)
[@@deriving sexp_of]

type pat_e7af17e =
  Token.t (* pattern [nN][eE][xX][tT][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_a7a1629 = Token.t (* pattern [cC][lL][aA][sS][sS] *)
[@@deriving sexp_of]

type pat_8fb2017 = Token.t (* pattern [dD][eE][lL][eE][tT][eE] *)
[@@deriving sexp_of]

type pat_da2756d = Token.t (* pattern [iI][fF] *)
[@@deriving sexp_of]

type pat_9aba201 = Token.t (* pattern [sS][eE][tT] *)
[@@deriving sexp_of]

type pat_d81286a =
  Token.t (* pattern [mM][yY][__][tT][eE][aA][mM][__][tT][eE][rR][rR][iI][tT][oO][rR][yY] *)
[@@deriving sexp_of]

type pat_cd35211 =
  Token.t (* pattern [tT][hH][iI][sS][__][fF][iI][sS][cC][aA][lL][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_068a1b3 = Token.t (* pattern [sS][tT][aA][tT][iI][cC] *)
[@@deriving sexp_of]

type pat_61d10d4 = Token.t (* pattern [oO][fF][fF][sS][eE][tT] *)
[@@deriving sexp_of]

type pat_806eea7 =
  Token.t (* pattern [fF][iI][sS][cC][aA][lL][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_22ad91b = Token.t (* pattern [tT][hH][iI][sS][__][wW][eE][eE][kK] *)
[@@deriving sexp_of]

type pat_9647ecb =
  Token.t (* pattern [mM][iI][nN][eE][__][aA][nN][dD][__][mM][yY][__][gG][rR][oO][uU][pP][sS] *)
[@@deriving sexp_of]

type pat_6b8ef7f =
  Token.t (* pattern [tT][hH][iI][sS][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_18cabff = Token.t (* pattern [sS][nN][iI][pP][pP][eE][tT] *)
[@@deriving sexp_of]

type pat_e563493 = Token.t (* pattern [lL][aA][sS][tT] *)
[@@deriving sexp_of]

type pat_600cee9 =
  Token.t (* pattern [lL][aA][sS][tT][__][fF][iI][sS][cC][aA][lL][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_ba29bfc = Token.t (* pattern [tT][rR][yY] *)
[@@deriving sexp_of]

type string_literal =
  Token.t (* pattern "'(\\\\[nNrRtTbBfF\"'_%\\\\]|[^\\\\'])*'" *)
[@@deriving sexp_of]

type pat_30c8ad0 = Token.t (* pattern [hH][aA][vV][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_41486aa = Token.t (* pattern [wW][hH][eE][rR][eE] *)
[@@deriving sexp_of]

type pat_4799665 = Token.t (* pattern [mM][eE][rR][gG][eE] *)
[@@deriving sexp_of]

type pat_fa7b9eb =
  Token.t (* pattern [sS][eE][cC][uU][rR][iI][tT][yY][__][eE][nN][fF][oO][rR][cC][eE][dD] *)
[@@deriving sexp_of]

type pat_73efeed = Token.t (* pattern [nN][eE][xX][tT][__][wW][eE][eE][kK] *)
[@@deriving sexp_of]

type pat_1206b1e = Token.t (* pattern [pP][rR][iI][vV][aA][tT][eE] *)
[@@deriving sexp_of]

type pat_b0ca2e7 = Token.t (* pattern [sS][cC][oO][pP][eE] *)
[@@deriving sexp_of]

type pat_c2f39fa = Token.t (* pattern [wW][iI][tT][hH][oO][uU][tT] *)
[@@deriving sexp_of]

type pat_ca28118 =
  Token.t (* pattern [gG][eE][oO][lL][oO][cC][aA][tT][iI][oO][nN] *)
[@@deriving sexp_of]

type pat_e07a1d8 = Token.t (* pattern [nN][uU][lL][lL][sS] *)
[@@deriving sexp_of]

type pat_6533f64 = Token.t (* pattern [tT][hH][rR][oO][wW] *)
[@@deriving sexp_of]

type pat_862500c = Token.t (* pattern [eE][xX][tT][eE][nN][dD][sS] *)
[@@deriving sexp_of]

type decimal = Token.t (* pattern -?\d+(\.\d+)? *)
[@@deriving sexp_of]

type floating_point_type = [
    `Float of Token.t (* "float" *)
  | `Double of Token.t (* "double" *)
]
[@@deriving sexp_of]

type pat_fd35955 =
  Token.t (* pattern [lL][aA][sS][tT][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_aacb7e0 =
  Token.t (* pattern [cC][aA][lL][eE][nN][dD][aA][rR][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_feedc91 = Token.t (* pattern [mM][iI][nN] *)
[@@deriving sexp_of]

type pat_fb04618 = Token.t (* pattern [oO][rR] *)
[@@deriving sexp_of]

type pat_d02ea82 = Token.t (* pattern [eE][mM][aA][iI][lL] *)
[@@deriving sexp_of]

type pat_5ae1624 = Token.t (* pattern [nN][eE][wW] *)
[@@deriving sexp_of]

type pat_dc73728 = Token.t (* pattern [eE][nN][dD] *)
[@@deriving sexp_of]

type pat_1137973 = Token.t (* pattern [wW][hH][iI][lL][eE] *)
[@@deriving sexp_of]

type pat_8eecf56 = Token.t (* pattern [aA][vV][gG] *)
[@@deriving sexp_of]

type pat_c31f8b0 = Token.t (* pattern [cC][oO][uU][nN][tT] *)
[@@deriving sexp_of]

type pat_9d32f57 = Token.t (* pattern [sS][eE][lL][eE][cC][tT] *)
[@@deriving sexp_of]

type pat_821611e =
  Token.t (* pattern [sS][uU][pP][pP][oO][rR][tT][sS][dD][eE][lL][eE][gG][aA][tT][eE][sS] *)
[@@deriving sexp_of]

type pat_867e13f = Token.t (* pattern [tT][rR][aA][cC][kK][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_79b8891 = Token.t (* pattern [aA][sS] *)
[@@deriving sexp_of]

type tok_choice_pat_f0b577b = Token.t
[@@deriving sexp_of]

type pat_93ab6a0 = Token.t (* pattern [tT][oO][dD][aA][yY] *)
[@@deriving sexp_of]

type pat_cd34266 =
  Token.t (* pattern [lL][aA][sS][tT][__][99][00][__][dD][aA][yY][sS] *)
[@@deriving sexp_of]

type pat_e1bb1f1 = Token.t (* pattern [iI][nN][cC][lL][uU][dD][eE][sS] *)
[@@deriving sexp_of]

type pat_3256c3b =
  Token.t (* pattern [cC][aA][lL][eE][nN][dD][aA][rR][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_2d4f868 = Token.t (* pattern [mM][iI][nN][eE] *)
[@@deriving sexp_of]

type pat_be37eaa = Token.t (* pattern [oO][vV][eE][rR][rR][iI][dD][eE] *)
[@@deriving sexp_of]

type pat_aaa65e9 =
  Token.t (* pattern [dD][aA][yY][__][iI][nN][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_a80178e = Token.t (* pattern [iI][nN] *)
[@@deriving sexp_of]

type pat_67603fa =
  Token.t (* pattern [cC][oO][nN][vV][eE][rR][tT][cC][uU][rR][rR][eE][nN][cC][yY] *)
[@@deriving sexp_of]

type dimensions =
  (Token.t (* "[" *) * Token.t (* "]" *)) list (* one or more *)
[@@deriving sexp_of]

type pat_e756b0a =
  Token.t (* pattern [tT][hH][iI][sS][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_f3342f2 = Token.t (* pattern [tT][hH][iI][sS][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_8ae5cef = Token.t (* pattern [fF][oO][rR] *)
[@@deriving sexp_of]

type pat_1618b1a = Token.t (* pattern [wW][iI][tT][hH] *)
[@@deriving sexp_of]

type line_comment_explicit = unit (* blank *)
[@@deriving sexp_of]

type pat_5eaae97 = Token.t (* pattern [fF][rR][oO][mM] *)
[@@deriving sexp_of]

type pat_be3e515 =
  Token.t (* pattern [rR][eE][cC][oO][rR][dD][vV][iI][sS][iI][bB][iI][lL][iI][tT][yY][cC][oO][nN][tT][eE][xX][tT] *)
[@@deriving sexp_of]

type pat_9f5c53b = Token.t (* pattern [dD][aA][yY][__][oO][nN][lL][yY] *)
[@@deriving sexp_of]

type pat_1f94420 = Token.t (* pattern [iI][nN][tT][eE][rR][fF][aA][cC][eE] *)
[@@deriving sexp_of]

type pat_15b4737 = Token.t (* pattern [bB][yY] *)
[@@deriving sexp_of]

type pat_377158e =
  Token.t (* pattern [sS][pP][eE][lL][lL][__][cC][oO][rR][rR][eE][cC][tT][iI][oO][nN] *)
[@@deriving sexp_of]

type pat_5d85530 = Token.t (* pattern [cC][uU][bB][eE] *)
[@@deriving sexp_of]

type pat_aefd5f4 =
  Token.t (* pattern [cC][oO][uU][nN][tT][__][dD][iI][sS][tT][iI][nN][cC][tT] *)
[@@deriving sexp_of]

type pat_374e277 =
  Token.t (* pattern [fF][iI][sS][cC][aA][lL][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_f5e99ef = Token.t (* pattern [gG][lL][oO][bB][aA][lL] *)
[@@deriving sexp_of]

type pat_77427ea = Token.t (* pattern [bB][eE][fF][oO][rR][eE] *)
[@@deriving sexp_of]

type pat_9091f20 = Token.t (* pattern [uU][pP][sS][eE][rR][tT] *)
[@@deriving sexp_of]

type pat_db8575e = Token.t (* pattern [dD][eE][lL][eE][gG][aA][tT][eE][dD] *)
[@@deriving sexp_of]

type block_comment_explicit = unit (* blank *)
[@@deriving sexp_of]

type pat_32d28c5 = Token.t (* pattern [nN][aA][mM][eE] *)
[@@deriving sexp_of]

type pat_ad43c45 = Token.t (* pattern [cC][oO][nN][tT][iI][nN][uU][eE] *)
[@@deriving sexp_of]

type pat_65f3c46 = Token.t (* pattern [dD][iI][vV][iI][sS][iI][oO][nN] *)
[@@deriving sexp_of]

type pat_b4abcb1 = Token.t (* pattern [eE][lL][sS][eE] *)
[@@deriving sexp_of]

type decimal_floating_point_literal = Token.t
[@@deriving sexp_of]

type pat_6938561 = Token.t (* pattern [aA][bB][oO][vV][eE] *)
[@@deriving sexp_of]

type pat_4d2cf55 = Token.t (* pattern [gG][rR][oO][uU][pP][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_a6a7a4f = Token.t (* pattern [rR][oO][wW][sS] *)
[@@deriving sexp_of]

type pat_6a8d01f = Token.t (* pattern [vV][iI][eE][wW][sS][tT][aA][tT] *)
[@@deriving sexp_of]

type pat_04be41e = Token.t (* pattern [gG][eE][tT] *)
[@@deriving sexp_of]

type pat_d1b1252 = Token.t (* pattern [gG][rR][oO][uU][pP] *)
[@@deriving sexp_of]

type pat_11dc5fc = Token.t (* pattern [vV][iI][eE][wW] *)
[@@deriving sexp_of]

type pat_c1f1c76 = Token.t (* pattern [iI][nN][sS][eE][rR][tT] *)
[@@deriving sexp_of]

type pat_49c537b = Token.t (* pattern [lL][iI][mM][iI][tT] *)
[@@deriving sexp_of]

type pat_dad77c5 = Token.t (* pattern [sS][wW][iI][tT][cC][hH] *)
[@@deriving sexp_of]

type currency_literal = Token.t (* pattern \w{3}\d+(\.\d+)? *)
[@@deriving sexp_of]

type pat_52321f4 =
  Token.t (* pattern [lL][aA][sS][tT][__][fF][iI][sS][cC][aA][lL][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_2bc0ede = Token.t (* pattern [tT][eE][aA][mM] *)
[@@deriving sexp_of]

type pat_6f0580e = Token.t (* pattern [iI][nN][hH][eE][rR][iI][tT][eE][dD] *)
[@@deriving sexp_of]

type pat_33bf837 = Token.t (* pattern [tT][rR][aA][nN][sS][iI][eE][nN][tT] *)
[@@deriving sexp_of]

type pat_06b7283 = Token.t (* pattern [vV][iI][rR][tT][uU][aA][lL] *)
[@@deriving sexp_of]

type pat_246e68b = Token.t (* pattern [aA][bB][sS][tT][rR][aA][cC][tT] *)
[@@deriving sexp_of]

type pat_e8c36c5 =
  Token.t (* pattern [sS][yY][sS][tT][eE][mM][..][rR][uU][nN][aA][sS] *)
[@@deriving sexp_of]

type pat_a1c26dd =
  Token.t (* pattern [fF][iI][sS][cC][aA][lL][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_423b0d5 = Token.t (* pattern [rR][eE][fF][eE][rR][eE][nN][cC][eE] *)
[@@deriving sexp_of]

type pat_dd36a63 = Token.t (* pattern [bB][rR][eE][aA][kK] *)
[@@deriving sexp_of]

type pat_1c754b5 =
  Token.t (* pattern [hH][oO][uU][rR][__][iI][nN][__][dD][aA][yY] *)
[@@deriving sexp_of]

type pat_d2a5196 =
  Token.t (* pattern [nN][eE][xX][tT][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_d7c68ba =
  Token.t (* pattern [tT][aA][rR][gG][eE][tT][__][lL][eE][nN][gG][tT][hH] *)
[@@deriving sexp_of]

type pat_3be512d = Token.t (* pattern [uU][sS][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_23179d4 = Token.t (* pattern [uU][nN][dD][eE][lL][eE][tT][eE] *)
[@@deriving sexp_of]

type pat_5d839fb = Token.t (* pattern [fF][iI][nN][aA][lL] *)
[@@deriving sexp_of]

type pat_2b19251 = Token.t (* pattern [bB][eE][lL][oO][wW] *)
[@@deriving sexp_of]

type pat_6876c9d = Token.t (* pattern [tT][oO][lL][aA][bB][eE][lL] *)
[@@deriving sexp_of]

type pat_1f32d9c =
  Token.t (* pattern [lL][aA][sS][tT][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_70e75fe = Token.t (* pattern [tT][hH][eE][nN] *)
[@@deriving sexp_of]

type pat_38432dc = Token.t (* pattern [cC][uU][sS][tT][oO][mM] *)
[@@deriving sexp_of]

type pat_4d80d01 =
  Token.t (* pattern [mM][yY][__][tT][eE][rR][rR][iI][tT][oO][rR][yY] *)
[@@deriving sexp_of]

type pat_c7cf9cb = Token.t (* pattern [rR][oO][lL][lL][uU][pP] *)
[@@deriving sexp_of]

type pat_a775992 =
  Token.t (* pattern [eE][vV][eE][rR][yY][tT][hH][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_21a3b9e = Token.t (* pattern [eE][nN][uU][mM] *)
[@@deriving sexp_of]

type pat_cf91efa = Token.t (* pattern [uU][sS][eE][rR][iI][dD] *)
[@@deriving sexp_of]

type pat_0909a1e = Token.t (* pattern [yY][eE][sS][tT][eE][rR][dD][aA][yY] *)
[@@deriving sexp_of]

type pat_9333026 = Token.t (* pattern [lL][iI][kK][eE] *)
[@@deriving sexp_of]

type pat_3ed4486 = Token.t (* pattern [fF][oO][rR][mM][aA][tT] *)
[@@deriving sexp_of]

type pat_e6ddd3d =
  Token.t (* pattern [iI][mM][pP][lL][eE][mM][eE][nN][tT][sS] *)
[@@deriving sexp_of]

type pat_d58874b =
  Token.t (* pattern [iI][nN][sS][tT][aA][nN][cC][eE][oO][fF] *)
[@@deriving sexp_of]

type pat_f039c98 = Token.t (* pattern [fF][iI][nN][aA][lL][lL][yY] *)
[@@deriving sexp_of]

type pat_4ce7b58 = Token.t (* pattern [aA][lL][lL] *)
[@@deriving sexp_of]

type pat_885cdb9 =
  Token.t (* pattern [dD][aA][yY][__][iI][nN][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_33e4156 = Token.t (* pattern [sS][hH][aA][rR][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_e0568e7 = Token.t (* pattern [nN][eE][tT][wW][oO][rR][kK] *)
[@@deriving sexp_of]

type pat_18ac7a8 =
  Token.t (* pattern [nN][eE][xX][tT][__][fF][iI][sS][cC][aA][lL][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_06b4797 = Token.t (* pattern [wW][hH][eE][nN] *)
[@@deriving sexp_of]

type pat_6d25e87 = Token.t (* pattern [sS][tT][aA][nN][dD][aA][rR][dD] *)
[@@deriving sexp_of]

type pat_4df3136 = Token.t (* pattern [cC][aA][tT][cC][hH] *)
[@@deriving sexp_of]

type pat_cb6bc7e = Token.t (* pattern [pP][hH][oO][nN][eE] *)
[@@deriving sexp_of]

type pat_0fd6b76 = Token.t (* pattern [oO][nN] *)
[@@deriving sexp_of]

type pat_a4cd92e = Token.t (* pattern [aA][sS][cC] *)
[@@deriving sexp_of]

type pat_ce482ba = Token.t (* pattern [oO][rR][dD][eE][rR] *)
[@@deriving sexp_of]

type pat_f571821 =
  Token.t (* pattern [sS][uU][pP][pP][oO][rR][tT][sS][dD][oO][mM][aA][iI][nN][sS] *)
[@@deriving sexp_of]

type block_comment = Token.t
[@@deriving sexp_of]

type pat_90d8ac5 =
  Token.t (* pattern [cC][aA][lL][eE][nN][dD][aA][rR][__][qQ][uU][aA][rR][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_5a14059 = Token.t (* pattern [aA][tT] *)
[@@deriving sexp_of]

type pat_9096c94 = Token.t (* pattern [sS][iI][dD][eE][bB][aA][rR] *)
[@@deriving sexp_of]

type pat_8faa65a = Token.t (* pattern [mM][eE][tT][aA][dD][aA][tT][aA] *)
[@@deriving sexp_of]

type pat_118aa93 =
  Token.t (* pattern [aA][bB][oO][vV][eE][__][oO][rR][__][bB][eE][lL][oO][wW] *)
[@@deriving sexp_of]

type pat_954cb76 = Token.t (* pattern [pP][rR][oO][tT][eE][cC][tT][eE][dD] *)
[@@deriving sexp_of]

type pat_58e1c65 =
  Token.t (* pattern [tT][hH][iI][sS][__][fF][iI][sS][cC][aA][lL][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_7a0d0ac = Token.t (* pattern [tT][rR][uU][eE] *)
[@@deriving sexp_of]

type pat_0a4d594 =
  Token.t (* pattern [mM][aA][xX][dD][eE][sS][cC][rR][iI][pP][tT][oO][rR][pP][eE][rR][rR][eE][cC][oO][rR][dD] *)
[@@deriving sexp_of]

type pat_a9304a9 = Token.t (* pattern [pP][uU][bB][lL][iI][cC] *)
[@@deriving sexp_of]

type pat_21131d9 = Token.t (* pattern [dD][iI][sS][tT][aA][nN][cC][eE] *)
[@@deriving sexp_of]

type pat_54e7304 = Token.t (* pattern [fF][iI][nN][dD] *)
[@@deriving sexp_of]

type pat_b2a4845 = Token.t (* pattern [rR][eE][tT][uU][rR][nN][iI][nN][gG] *)
[@@deriving sexp_of]

type pat_218de4b = Token.t (* pattern [nN][eE][xX][tT][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type pat_61878b9 = Token.t (* pattern [aA][fF][tT][eE][rR] *)
[@@deriving sexp_of]

type pat_7a53b06 = Token.t (* pattern [nN][uU][lL][lL] *)
[@@deriving sexp_of]

type pat_8a4ef20 = Token.t (* pattern [fF][aA][lL][sS][eE] *)
[@@deriving sexp_of]

type pat_1f84923 =
  Token.t (* pattern [sS][yY][sS][tT][eE][mM][__][mM][oO][dD][eE] *)
[@@deriving sexp_of]

type pat_ab35017 = Token.t (* pattern [tT][oO][mM][oO][rR][rR][oO][wW] *)
[@@deriving sexp_of]

type pat_0590266 = Token.t (* pattern [sS][uU][mM] *)
[@@deriving sexp_of]

type pat_c9473ab = Token.t (* pattern [cC][aA][tT][eE][gG][oO][rR][yY] *)
[@@deriving sexp_of]

type pat_ed3b2b8 = Token.t (* pattern [tT][yY][pP][eE][oO][fF] *)
[@@deriving sexp_of]

type pat_20c5c21 = Token.t (* pattern [dD][aA][tT][aA] *)
[@@deriving sexp_of]

type pat_3525a4f = Token.t (* pattern [uU][sS][eE][rR][__][mM][oO][dD][eE] *)
[@@deriving sexp_of]

type pat_3dfbd59 =
  Token.t (* pattern [wW][eE][eE][kK][__][iI][nN][__][mM][oO][nN][tT][hH] *)
[@@deriving sexp_of]

type pat_a0fe1a6 = Token.t (* pattern [aA][nN][dD] *)
[@@deriving sexp_of]

type pat_3fda63a = Token.t (* pattern [vV][oO][iI][dD] *)
[@@deriving sexp_of]

type pat_58ecf42 = Token.t (* pattern [dD][eE][sS][cC] *)
[@@deriving sexp_of]

type identifier = Token.t (* pattern [\p{L}_$][\p{L}\p{Nd}_$]* *)
[@@deriving sexp_of]

type int_ = Token.t
[@@deriving sexp_of]

type pat_3b07412 = Token.t (* pattern [uU][pP][dD][aA][tT][eE] *)
[@@deriving sexp_of]

type pat_8c31969 = Token.t (* pattern [hH][iI][gG][hH][lL][iI][gG][hH][tT] *)
[@@deriving sexp_of]

type pat_cf9b268 = Token.t (* pattern [lL][aA][sS][tT][__][wW][eE][eE][kK] *)
[@@deriving sexp_of]

type pat_58f9752 =
  Token.t (* pattern [wW][eE][eE][kK][__][iI][nN][__][yY][eE][aA][rR] *)
[@@deriving sexp_of]

type integral_type = [
    `Byte of Token.t (* "byte" *)
  | `Short of Token.t (* "short" *)
  | `Int of Token.t (* "int" *)
  | `Long of Token.t (* "long" *)
  | `Char of Token.t (* "char" *)
]
[@@deriving sexp_of]

type property_navigation = (Token.t (* "?" *) option * Token.t (* "." *))
[@@deriving sexp_of]

type pat_b14e0b2 =
  Token.t (* pattern [tT][eE][sS][tT][mM][eE][tT][hH][oO][dD] *)
[@@deriving sexp_of]

type pat_182a8c2 = Token.t (* pattern [fF][iI][rR][sS][tT] *)
[@@deriving sexp_of]

type pat_2c570e1 =
  Token.t (* pattern [pP][rR][iI][cC][eE][bB][oO][oO][kK][iI][dD] *)
[@@deriving sexp_of]

type line_comment = Token.t
[@@deriving sexp_of]

type pat_315b95c =
  Token.t (* pattern [dD][aA][yY][__][iI][nN][__][wW][eE][eE][kK] *)
[@@deriving sexp_of]

type super = pat_4735214
[@@deriving sexp_of]

type this = pat_ee0612c
[@@deriving sexp_of]

type count_expression = (pat_c31f8b0 * Token.t (* "(" *) * Token.t (* ")" *))
[@@deriving sexp_of]

type set_comparison_operator = [
    `Pat_a80178e of pat_a80178e
  | `Pat_87c7e19_pat_a80178e of (pat_87c7e19 * pat_a80178e)
  | `Pat_e1bb1f1 of pat_e1bb1f1
  | `Pat_ba503d3 of pat_ba503d3
]
[@@deriving sexp_of]

type update_type = [
    `Pat_867e13f of pat_867e13f
  | `Pat_6a8d01f of pat_6a8d01f
]
[@@deriving sexp_of]

type using_scope_type = [
    `Pat_db8575e of pat_db8575e
  | `Pat_a775992 of pat_a775992
  | `Pat_2d4f868 of pat_2d4f868
  | `Pat_9647ecb of pat_9647ecb
  | `Pat_4d80d01 of pat_4d80d01
  | `Pat_d81286a of pat_d81286a
  | `Pat_2bc0ede of pat_2bc0ede
]
[@@deriving sexp_of]

type value_comparison_operator = [
    `EQ of Token.t (* "=" *)
  | `BANGEQ of Token.t (* "!=" *)
  | `LT of Token.t (* "<" *)
  | `LTEQ of Token.t (* "<=" *)
  | `GT of Token.t (* ">" *)
  | `GTEQ of Token.t (* ">=" *)
  | `Pat_9333026 of pat_9333026
]
[@@deriving sexp_of]

type all_rows_clause = (pat_4ce7b58 * pat_a6a7a4f)
[@@deriving sexp_of]

type fields_type = [
    `Pat_4ce7b58 of pat_4ce7b58
  | `Pat_38432dc of pat_38432dc
  | `Pat_6d25e87 of pat_6d25e87
]
[@@deriving sexp_of]

type in_type = [
    `Pat_4ce7b58 of pat_4ce7b58
  | `Pat_d02ea82 of pat_d02ea82
  | `Pat_32d28c5 of pat_32d28c5
  | `Pat_cb6bc7e of pat_cb6bc7e
  | `Pat_9096c94 of pat_9096c94
]
[@@deriving sexp_of]

type with_data_cat_filter_type = [
    `Pat_5a14059 of pat_5a14059
  | `Pat_6938561 of pat_6938561
  | `Pat_2b19251 of pat_2b19251
  | `Pat_118aa93 of pat_118aa93
]
[@@deriving sexp_of]

type null_literal = pat_7a53b06
[@@deriving sexp_of]

type boolean = [ `Pat_7a0d0ac of pat_7a0d0ac | `Pat_8a4ef20 of pat_8a4ef20 ]
[@@deriving sexp_of]

type void_type = pat_3fda63a
[@@deriving sexp_of]

type order_direction = [
    `Pat_a4cd92e of pat_a4cd92e
  | `Pat_58ecf42 of pat_58ecf42
]
[@@deriving sexp_of]

type variable_declarator_id = (identifier (*tok*) * dimensions option)
[@@deriving sexp_of]

type dotted_identifier = (
    identifier (*tok*)
  * (Token.t (* "." *) * identifier (*tok*)) list (* one or more *)
)
[@@deriving sexp_of]

type inferred_parameters = (
    Token.t (* "(" *)
  * identifier (*tok*)
  * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
  * Token.t (* ")" *)
)
[@@deriving sexp_of]

type name = [
    `Id of identifier (*tok*)
  | `Scoped_id of (name * Token.t (* "." *) * identifier (*tok*))
]
[@@deriving sexp_of]

type using_clause = (
    pat_3be512d * pat_81b900e * Token.t (* "=" *) * identifier (*tok*)
)
[@@deriving sexp_of]

type trigger_event = [
    `Pat_77427ea_pat_c1f1c76 of (pat_77427ea * pat_c1f1c76)
  | `Pat_77427ea_pat_3b07412 of (pat_77427ea * pat_3b07412)
  | `Pat_77427ea_pat_8fb2017 of (pat_77427ea * pat_8fb2017)
  | `Pat_61878b9_pat_c1f1c76 of (pat_61878b9 * pat_c1f1c76)
  | `Pat_61878b9_pat_3b07412 of (pat_61878b9 * pat_3b07412)
  | `Pat_61878b9_pat_8fb2017 of (pat_61878b9 * pat_8fb2017)
  | `Pat_61878b9_pat_23179d4 of (pat_61878b9 * pat_23179d4)
]
[@@deriving sexp_of]

type for_type = [
    `Pat_3b07412 of pat_3b07412
  | `Pat_423b0d5 of pat_423b0d5
  | `Pat_11dc5fc of pat_11dc5fc
]
[@@deriving sexp_of]

type dml_type = [
    `Pat_c1f1c76 of pat_c1f1c76
  | `Pat_3b07412 of pat_3b07412
  | `Pat_8fb2017 of pat_8fb2017
  | `Pat_23179d4 of pat_23179d4
]
[@@deriving sexp_of]

type with_highlight = pat_8c31969
[@@deriving sexp_of]

type date_literal = [
    `Pat_0909a1e of pat_0909a1e
  | `Pat_93ab6a0 of pat_93ab6a0
  | `Pat_ab35017 of pat_ab35017
  | `Pat_cf9b268 of pat_cf9b268
  | `Pat_22ad91b of pat_22ad91b
  | `Pat_73efeed of pat_73efeed
  | `Pat_1f32d9c of pat_1f32d9c
  | `Pat_6b8ef7f of pat_6b8ef7f
  | `Pat_e7af17e of pat_e7af17e
  | `Pat_cd34266 of pat_cd34266
  | `Pat_c743a5d of pat_c743a5d
  | `Pat_e756b0a of pat_e756b0a
  | `Pat_fd35955 of pat_fd35955
  | `Pat_d2a5196 of pat_d2a5196
  | `Pat_f3342f2 of pat_f3342f2
  | `Pat_b69dfa5 of pat_b69dfa5
  | `Pat_218de4b of pat_218de4b
  | `Pat_cd35211 of pat_cd35211
  | `Pat_52321f4 of pat_52321f4
  | `Pat_c5aab40 of pat_c5aab40
  | `Pat_58e1c65 of pat_58e1c65
  | `Pat_600cee9 of pat_600cee9
  | `Pat_18ac7a8 of pat_18ac7a8
]
[@@deriving sexp_of]

type modifier = [
    `Pat_f5e99ef of pat_f5e99ef
  | `Pat_a9304a9 of pat_a9304a9
  | `Pat_b14e0b2 of pat_b14e0b2
  | `Pat_954cb76 of pat_954cb76
  | `Pat_be37eaa of pat_be37eaa
  | `Pat_1206b1e of pat_1206b1e
  | `Pat_06b7283 of pat_06b7283
  | `Pat_246e68b of pat_246e68b
  | `Pat_068a1b3 of pat_068a1b3
  | `Pat_5d839fb of pat_5d839fb
  | `Pat_33bf837 of pat_33bf837
  | `Pat_1618b1a_pat_33e4156 of (pat_1618b1a * pat_33e4156)
  | `Pat_c2f39fa_pat_33e4156 of (pat_c2f39fa * pat_33e4156)
  | `Pat_6f0580e_pat_33e4156 of (pat_6f0580e * pat_33e4156)
]
[@@deriving sexp_of]

type order_null_direciton = [
    `Pat_e07a1d8_pat_182a8c2 of (pat_e07a1d8 * pat_182a8c2)
  | `Pat_e07a1d8_pat_e563493 of (pat_e07a1d8 * pat_e563493)
]
[@@deriving sexp_of]

type function_name = [
    `Pat_8eecf56 of pat_8eecf56
  | `Pat_c31f8b0 of pat_c31f8b0
  | `Pat_aefd5f4 of pat_aefd5f4
  | `Pat_feedc91 of pat_feedc91
  | `Pat_46c2d71 of pat_46c2d71
  | `Pat_0590266 of pat_0590266
  | `Pat_4d2cf55 of pat_4d2cf55
  | `Pat_3ed4486 of pat_3ed4486
  | `Pat_67603fa of pat_67603fa
  | `Pat_6876c9d of pat_6876c9d
  | `Pat_3256c3b of pat_3256c3b
  | `Pat_90d8ac5 of pat_90d8ac5
  | `Pat_aacb7e0 of pat_aacb7e0
  | `Pat_885cdb9 of pat_885cdb9
  | `Pat_315b95c of pat_315b95c
  | `Pat_aaa65e9 of pat_aaa65e9
  | `Pat_9f5c53b of pat_9f5c53b
  | `Pat_a1c26dd of pat_a1c26dd
  | `Pat_374e277 of pat_374e277
  | `Pat_806eea7 of pat_806eea7
  | `Pat_1c754b5 of pat_1c754b5
  | `Pat_3dfbd59 of pat_3dfbd59
  | `Pat_58f9752 of pat_58f9752
]
[@@deriving sexp_of]

type update_clause = (
    pat_3b07412
  * update_type
  * (Token.t (* "," *) * update_type) list (* zero or more *)
)
[@@deriving sexp_of]

type soql_using_clause = (pat_3be512d * pat_b0ca2e7 * using_scope_type)
[@@deriving sexp_of]

type in_clause = (pat_a80178e * in_type * pat_5f24f83)
[@@deriving sexp_of]

type with_record_visibility_param = [
    `Pat_0a4d594_EQ_int of (pat_0a4d594 * Token.t (* "=" *) * int_ (*tok*))
  | `Pat_f571821_EQ_bool of (pat_f571821 * Token.t (* "=" *) * boolean)
  | `Pat_821611e_EQ_bool of (pat_821611e * Token.t (* "=" *) * boolean)
]
[@@deriving sexp_of]

type literal = [
    `Int of int_ (*tok*)
  | `Deci_floa_point_lit of decimal_floating_point_literal (*tok*)
  | `Bool of boolean
  | `Str_lit of string_literal (*tok*)
  | `Null_lit of null_literal
]
[@@deriving sexp_of]

type anon_choice_id_73106c9 = [
    `Id of identifier (*tok*)
  | `Apex_meth_id of (
        identifier (*tok*) * Token.t (* "(" *) * Token.t (* ")" *)
    )
]
[@@deriving sexp_of]

type field_identifier = [
    `Id of identifier (*tok*)
  | `Dotted_id of dotted_identifier
]
[@@deriving sexp_of]

type storage_identifier = [
    `Id of identifier (*tok*)
  | `Dotted_id of dotted_identifier
]
[@@deriving sexp_of]

type with_data_cat_filter = (
    identifier (*tok*)
  * with_data_cat_filter_type
  * [
        `Id of identifier (*tok*)
      | `LPAR_id_rep_COMMA_id_RPAR of inferred_parameters
    ]
)
[@@deriving sexp_of]

type for_clause = (
    pat_8ae5cef
  * for_type
  * (Token.t (* "," *) * for_type) list (* zero or more *)
)
[@@deriving sexp_of]

type soql_literal = [
    `Int of int_ (*tok*)
  | `Str_lit of string_literal (*tok*)
  | `Date of date (*tok*)
  | `Date_time of date_time (*tok*)
  | `Bool of boolean
  | `Date_lit of date_literal
  | `Date_lit_with_param of (
        tok_choice_pat_f0b577b * Token.t (* ":" *) * int_ (*tok*)
    )
  | `Curr_lit of currency_literal (*tok*)
  | `Null_lit of null_literal
]
[@@deriving sexp_of]

type field_list = (
    field_identifier
  * (Token.t (* "," *) * field_identifier) list (* zero or more *)
)
[@@deriving sexp_of]

type with_data_cat_expression = (
    pat_20c5c21
  * pat_c9473ab
  * with_data_cat_filter
  * (pat_a0fe1a6 * with_data_cat_filter) list (* zero or more *)
)
[@@deriving sexp_of]

type else_expression = (pat_b4abcb1 * field_list)
[@@deriving sexp_of]

type when_expression = (
    pat_06b4797 * identifier (*tok*) * pat_70e75fe * field_list
)
[@@deriving sexp_of]

type anon_choice_stor_id_355c95c = [
    `Stor_id of storage_identifier
  | `Stor_alias of (
        storage_identifier
      * pat_79b8891 option
      * identifier (*tok*)
    )
]
[@@deriving sexp_of]

type soql_with_type = [
    `Pat_fa7b9eb of pat_fa7b9eb
  | `Pat_3525a4f of pat_3525a4f
  | `Pat_1f84923 of pat_1f84923
  | `With_record_visi_exp of (
        pat_be3e515
      * Token.t (* "(" *)
      * with_record_visibility_param
      * (Token.t (* "," *) * with_record_visibility_param)
          list (* zero or more *)
      * Token.t (* ")" *)
    )
  | `With_data_cat_exp of with_data_cat_expression
  | `With_user_id_type of (
        pat_cf91efa * Token.t (* "=" *) * string_literal (*tok*)
    )
]
[@@deriving sexp_of]

type from_clause = (
    pat_5eaae97
  * anon_choice_stor_id_355c95c
  * (Token.t (* "," *) * anon_choice_stor_id_355c95c) list (* zero or more *)
)
[@@deriving sexp_of]

type soql_with_clause = (pat_1618b1a * soql_with_type)
[@@deriving sexp_of]

type accessor_declaration = (
    modifiers option
  * [ `Pat_04be41e of pat_04be41e | `Pat_9aba201 of pat_9aba201 ]
  * anon_choice_trig_body_f78fea4
)

and accessor_list = (
    Token.t (* "{" *)
  * accessor_declaration list (* one or more *)
  * Token.t (* "}" *)
)

and annotation = (Token.t (* "@" *) * name * annotation_argument_list option)

and annotation_argument_list = (
    Token.t (* "(" *)
  * [
        `Elem_value of element_value
      | `Anno_key_value_rep_opt_COMMA_anno_key_value of (
            annotation_key_value
          * (Token.t (* "," *) option * annotation_key_value)
              list (* zero or more *)
        )
    ]
  * Token.t (* ")" *)
)

and annotation_key_value = (
    identifier (*tok*) * Token.t (* "=" *) * element_value
)

and anon_LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR_bea6d78 = (
    Token.t (* "(" *)
  * anon_choice_soql_lit_3019e24
  * (Token.t (* "," *) * anon_choice_soql_lit_3019e24)
      list (* zero or more *)
  * Token.t (* ")" *)
)

and anon_choice_field_id_cb081aa = [
    `Field_id of field_identifier
  | `Func_exp of function_expression
]

and anon_choice_int_1466488 = [
    `Int of int_ (*tok*)
  | `Bound_apex_exp of bound_apex_expression
]

and anon_choice_prim_exp_bbf4eda = [
    `Prim_exp of primary_expression
  | `Super of super
]

and anon_choice_soql_lit_3019e24 = [
    `Soql_lit of soql_literal
  | `Bound_apex_exp of bound_apex_expression
]

and anon_choice_trig_body_f78fea4 = [
    `Blk of trigger_body
  | `SEMI of Token.t (* ";" *)
]

and anon_exp_rep_COMMA_exp_0bb260c = (
    expression
  * (Token.t (* "," *) * expression) list (* zero or more *)
)

and argument_list = (
    Token.t (* "(" *)
  * anon_exp_rep_COMMA_exp_0bb260c option
  * Token.t (* ")" *)
)

and array_access = (
    primary_expression * Token.t (* "[" *) * expression * Token.t (* "]" *)
)

and array_initializer = (
    Token.t (* "{" *)
  * (
        variable_initializer
      * (Token.t (* "," *) * variable_initializer) list (* zero or more *)
    )
      option
  * Token.t (* "}" *)
)

and binary_expression = [
    `Exp_GT_exp of (expression * Token.t (* ">" *) * expression)
  | `Exp_LT_exp of (expression * Token.t (* "<" *) * expression)
  | `Exp_GTEQ_exp of (expression * Token.t (* ">=" *) * expression)
  | `Exp_LTEQ_exp of (expression * Token.t (* "<=" *) * expression)
  | `Exp_EQEQ_exp of (expression * Token.t (* "==" *) * expression)
  | `Exp_EQEQEQ_exp of (expression * Token.t (* "===" *) * expression)
  | `Exp_BANGEQ_exp of (expression * Token.t (* "!=" *) * expression)
  | `Exp_BANGEQEQ_exp of (expression * Token.t (* "!==" *) * expression)
  | `Exp_AMPAMP_exp of (expression * Token.t (* "&&" *) * expression)
  | `Exp_BARBAR_exp of (expression * Token.t (* "||" *) * expression)
  | `Exp_PLUS_exp of (expression * Token.t (* "+" *) * expression)
  | `Exp_DASH_exp of (expression * Token.t (* "-" *) * expression)
  | `Exp_STAR_exp of (expression * Token.t (* "*" *) * expression)
  | `Exp_SLASH_exp of (expression * Token.t (* "/" *) * expression)
  | `Exp_AMP_exp of (expression * Token.t (* "&" *) * expression)
  | `Exp_BAR_exp of (expression * Token.t (* "|" *) * expression)
  | `Exp_HAT_exp of (expression * Token.t (* "^" *) * expression)
  | `Exp_PERC_exp of (expression * Token.t (* "%" *) * expression)
  | `Exp_LTLT_exp of (expression * Token.t (* "<<" *) * expression)
  | `Exp_GTGT_exp of (expression * Token.t (* ">>" *) * expression)
  | `Exp_GTGTGT_exp of (expression * Token.t (* ">>>" *) * expression)
]

and block = (
    Token.t (* "{" *)
  * statement list (* zero or more *)
  * Token.t (* "}" *)
)

and boolean_expression = [
    `And_exp of (
        condition_expression
      * (pat_a0fe1a6 * condition_expression) list (* one or more *)
    )
  | `Or_exp of (
        condition_expression
      * (pat_fb04618 * condition_expression) list (* one or more *)
    )
  | `Not_exp of (pat_87c7e19 * condition_expression)
  | `Cond_exp of condition_expression
]

and bound_apex_expression = (Token.t (* ":" *) * expression)

and catch_clause = (
    pat_4df3136 * Token.t (* "(" *) * catch_formal_parameter
  * Token.t (* ")" *) * trigger_body
)

and catch_formal_parameter = (
    modifiers option
  * unannotated_type
  * variable_declarator_id
)

and class_body = (
    Token.t (* "{" *)
  * class_body_declaration list (* zero or more *)
  * Token.t (* "}" *)
)

and class_body_declaration = [
    `Field_decl of (
        modifiers option
      * unannotated_type
      * variable_declarator_list
      * [ `Acce_list of accessor_list | `SEMI of Token.t (* ";" *) ]
    )
  | `Meth_decl of method_declaration
  | `Class_decl of class_declaration
  | `Inte_decl of interface_declaration
  | `Enum_decl of enum_declaration
  | `Blk of trigger_body
  | `Static_init of (pat_068a1b3 * trigger_body)
  | `Cons_decl of (
        modifiers option
      * constructor_declarator
      * constructor_body
    )
  | `SEMI of Token.t (* ";" *)
]

and class_declaration = (
    modifiers option
  * pat_a7a1629
  * identifier (*tok*)
  * type_parameters option
  * superclass option
  * interfaces option
  * class_body
)

and comparison = [
    `Value_comp of (value_comparison_operator * anon_choice_soql_lit_3019e24)
  | `Set_comp of (
        set_comparison_operator
      * [
            `Subq of subquery
          | `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR of
              anon_LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR_bea6d78
          | `Bound_apex_exp of bound_apex_expression
        ]
    )
]

and condition_expression = [
    `LPAR_bool_exp_RPAR of (
        Token.t (* "(" *) * boolean_expression * Token.t (* ")" *)
    )
  | `Comp_exp of (value_expression * comparison)
]

and constant_declaration = (
    modifiers option
  * unannotated_type
  * variable_declarator_list
  * Token.t (* ";" *)
)

and constructor_body = (
    Token.t (* "{" *)
  * explicit_constructor_invocation option
  * statement list (* zero or more *)
  * Token.t (* "}" *)
)

and constructor_declarator = (
    type_parameters option
  * identifier (*tok*)
  * formal_parameters
)

and declaration = [
    `Class_decl of class_declaration
  | `Trig_decl of (
        pat_f300483
      * identifier (*tok*)
      * pat_0fd6b76
      * identifier (*tok*)
      * Token.t (* "(" *)
      * trigger_event
      * (Token.t (* "," *) * trigger_event) list (* zero or more *)
      * Token.t (* ")" *)
      * trigger_body
    )
  | `Inte_decl of interface_declaration
  | `Enum_decl of enum_declaration
]

and dimensions_expr = (Token.t (* "[" *) * expression * Token.t (* "]" *))

and dml_expression = [
    `Dml_type_prim_exp of (dml_type * primary_expression)
  | `Pat_9091f20_prim_exp_opt_unan_type of (
        pat_9091f20
      * primary_expression
      * unannotated_type option
    )
  | `Pat_4799665_prim_exp_id of (
        pat_4799665 * primary_expression * identifier (*tok*)
    )
]

and element_value = [
    `Exp of expression
  | `Elem_value_array_init of (
        Token.t (* "{" *)
      * (
            element_value
          * (Token.t (* "," *) * element_value) list (* zero or more *)
        )
          option
      * Token.t (* "," *) option
      * Token.t (* "}" *)
    )
  | `Anno of annotation
]

and enum_body = (
    Token.t (* "{" *)
  * (
        enum_constant
      * (Token.t (* "," *) * enum_constant) list (* zero or more *)
    )
      option
  * Token.t (* "}" *)
)

and enum_constant = (modifiers option * identifier (*tok*))

and enum_declaration = (
    modifiers option
  * pat_21a3b9e
  * identifier (*tok*)
  * interfaces option
  * enum_body
)

and explicit_constructor_invocation = (
    [
        `Opt_type_args_choice_this of (
            type_arguments option
          * [ `This of this | `Super of super ]
        )
      | `Choice_prim_exp_DOT_opt_type_args_super of (
            [ `Prim_exp of primary_expression ]
          * Token.t (* "." *)
          * type_arguments option
          * super
        )
    ]
  * argument_list
  * Token.t (* ";" *)
)

and expression = [
    `Assign_exp of (
        [
            `Id of identifier (*tok*)
          | `Field_access of field_access
          | `Array_access of array_access
        ]
      * [
            `EQ of Token.t (* "=" *)
          | `PLUSEQ of Token.t (* "+=" *)
          | `DASHEQ of Token.t (* "-=" *)
          | `STAREQ of Token.t (* "*=" *)
          | `SLASHEQ of Token.t (* "/=" *)
          | `AMPEQ of Token.t (* "&=" *)
          | `BAREQ of Token.t (* "|=" *)
          | `HATEQ of Token.t (* "^=" *)
          | `PERCEQ of Token.t (* "%=" *)
          | `LTLTEQ of Token.t (* "<<=" *)
          | `GTGTEQ of Token.t (* ">>=" *)
          | `GTGTGTEQ of Token.t (* ">>>=" *)
        ]
      * expression
    )
  | `Bin_exp of binary_expression
  | `Inst_exp of (expression * pat_d58874b * type_)
  | `Tern_exp of (
        expression * Token.t (* "?" *) * expression * Token.t (* ":" *)
      * expression
    )
  | `Update_exp of update_expression
  | `Prim_exp of primary_expression
  | `Un_exp of unary_expression
  | `Cast_exp of (Token.t (* "(" *) * type_ * Token.t (* ")" *) * expression)
  | `Dml_exp of dml_expression
  | `Switch_exp of switch_expression
]

and extends_interfaces = (pat_862500c * type_list)

and field_access = (
    anon_choice_prim_exp_bbf4eda
  * (property_navigation * super) option
  * property_navigation
  * [ `Id of identifier (*tok*) | `This of this ]
)

and finally_clause = (pat_f039c98 * trigger_body)

and find_clause = (
    pat_54e7304
  * [
        `Bound_apex_exp of bound_apex_expression
      | `Term_sepa_start_term_term_sepa_end of (
            Token.t (* "'" *) * term (*tok*) * Token.t (* "'" *)
        )
    ]
)

and formal_parameter = (
    modifiers option
  * unannotated_type
  * variable_declarator_id
)

and formal_parameters = (
    Token.t (* "(" *)
  * (
        formal_parameter
      * (Token.t (* "," *) * formal_parameter) list (* zero or more *)
    )
      option
  * Token.t (* ")" *)
)

and function_expression = [
    `Pat_21131d9_LPAR_choice_field_id_COMMA_geo_loca_type_COMMA_str_lit_RPAR of (
        pat_21131d9
      * Token.t (* "(" *)
      * [
            `Field_id of field_identifier
          | `Bound_apex_exp of bound_apex_expression
        ]
      * Token.t (* "," *)
      * geo_location_type
      * Token.t (* "," *)
      * string_literal (*tok*)
      * Token.t (* ")" *)
    )
  | `Func_name_LPAR_value_exp_RPAR of (
        function_name * Token.t (* "(" *) * value_expression
      * Token.t (* ")" *)
    )
]

and generic_type = (
    [ `Id of identifier (*tok*) | `Scoped_type_id of scoped_type_identifier ]
  * type_arguments
)

and geo_location_type = [
    `Field_id of field_identifier
  | `Bound_apex_exp of bound_apex_expression
  | `Pat_ca28118_LPAR_deci_COMMA_deci_RPAR of (
        pat_ca28118 * Token.t (* "(" *) * decimal (*tok*) * Token.t (* "," *)
      * decimal (*tok*) * Token.t (* ")" *)
    )
]

and group_by_clause = (
    pat_d1b1252
  * pat_15b4737
  * group_by_expression
  * having_clause option
)

and group_by_expression = [
    `Choice_field_id_rep_COMMA_choice_field_id of (
        anon_choice_field_id_cb081aa
      * (Token.t (* "," *) * anon_choice_field_id_cb081aa)
          list (* zero or more *)
    )
  | `Choice_pat_c7cf9cb_LPAR_field_id_rep_COMMA_field_id_RPAR of (
        [ `Pat_c7cf9cb of pat_c7cf9cb | `Pat_5d85530 of pat_5d85530 ]
      * Token.t (* "(" *)
      * field_identifier
      * (Token.t (* "," *) * field_identifier) list (* zero or more *)
      * Token.t (* ")" *)
    )
]

and having_boolean_expression = [
    `Having_and_exp of (
        having_condition_expression
      * (pat_a0fe1a6 * having_condition_expression) list (* one or more *)
    )
  | `Having_or_exp of (
        having_condition_expression
      * (pat_fb04618 * having_condition_expression) list (* one or more *)
    )
  | `Having_not_exp of (pat_87c7e19 * having_condition_expression)
  | `Having_cond_exp of having_condition_expression
]

and having_clause = (pat_30c8ad0 * having_boolean_expression)

and having_comparison = [
    `Having_value_comp of (
        value_comparison_operator * anon_choice_soql_lit_3019e24
    )
  | `Having_set_comp of (
        set_comparison_operator
      * [
            `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR of
              anon_LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR_bea6d78
          | `Bound_apex_exp of bound_apex_expression
        ]
    )
]

and having_condition_expression = [
    `LPAR_having_bool_exp_RPAR of (
        Token.t (* "(" *) * having_boolean_expression * Token.t (* ")" *)
    )
  | `Having_comp_exp of (function_expression * having_comparison)
]

and interface_body = (
    Token.t (* "{" *)
  * [
        `Cst_decl of constant_declaration
      | `Enum_decl of enum_declaration
      | `Meth_decl of method_declaration
      | `Class_decl of class_declaration
      | `Inte_decl of interface_declaration
      | `SEMI of Token.t (* ";" *)
    ]
      list (* zero or more *)
  * Token.t (* "}" *)
)

and interface_declaration = (
    modifiers option
  * pat_1f94420
  * identifier (*tok*)
  * type_parameters option
  * extends_interfaces option
  * interface_body
)

and interfaces = (pat_e6ddd3d * type_list)

and limit_clause = (pat_49c537b * anon_choice_int_1466488)

and local_variable_declaration = (
    modifiers option
  * unannotated_type
  * variable_declarator_list
  * Token.t (* ";" *)
)

and map_initializer = (
    Token.t (* "{" *)
  * (
        map_initializer_
      * (Token.t (* "," *) * map_initializer_) list (* zero or more *)
    )
      option
  * Token.t (* "}" *)
)

and map_initializer_ = (expression * Token.t (* "=>" *) * expression)

and method_declaration = (
    modifiers option
  * method_header
  * anon_choice_trig_body_f78fea4
)

and method_declarator = (
    identifier (*tok*)
  * formal_parameters
  * dimensions option
)

and method_header = (
    (type_parameters * annotation list (* zero or more *)) option
  * unannotated_type
  * method_declarator
)

and modifiers =
  [ `Anno of annotation | `Modi of modifier ] list (* one or more *)

and offset_clause = (pat_61d10d4 * anon_choice_int_1466488)

and order_by_clause = (
    pat_ce482ba
  * pat_15b4737
  * order_expression
  * (Token.t (* "," *) * order_expression) list (* zero or more *)
)

and order_expression = (
    value_expression
  * order_direction option
  * order_null_direciton option
)

and parenthesized_expression = (
    Token.t (* "(" *) * expression * Token.t (* ")" *)
)

and primary_expression = [
    `Lit of literal
  | `Class_lit of (unannotated_type * Token.t (* "." *) * pat_a7a1629)
  | `This of this
  | `Id of identifier (*tok*)
  | `Paren_exp of parenthesized_expression
  | `Obj_crea_exp of (
        pat_5ae1624
      * type_arguments option
      * simple_type
      * argument_list
      * class_body option
    )
  | `Field_access of field_access
  | `Array_access of array_access
  | `Meth_invo of (
        [
            `Id of identifier (*tok*)
          | `Choice_prim_exp_prop_navi_opt_super_prop_navi_opt_type_args_id of (
                anon_choice_prim_exp_bbf4eda
              * property_navigation
              * (super * property_navigation) option
              * type_arguments option
              * identifier (*tok*)
            )
        ]
      * argument_list
    )
  | `Array_crea_exp of (
        pat_5ae1624
      * simple_type
      * [
            `Rep1_dimens_expr_opt_dimens of (
                dimensions_expr list (* one or more *)
              * dimensions option
            )
          | `Dimens_array_init of (dimensions * array_initializer)
          | `Array_init of array_initializer
        ]
    )
  | `Map_crea_exp of (pat_5ae1624 * simple_type * map_initializer)
  | `Query_exp of (
        Token.t (* "[" *)
      * [ `Soql_query of soql_query | `Sosl_query of sosl_query ]
      * Token.t (* "]" *)
    )
]

and query_expression_ = sosl_query_body

and returning_clause = (
    pat_b2a4845
  * sobject_return
  * (Token.t (* "," *) * sobject_return) list (* zero or more *)
)

and scoped_type_identifier = (
    [
        `Id of identifier (*tok*)
      | `Scoped_type_id of scoped_type_identifier
      | `Gene_type of generic_type
    ]
  * Token.t (* "." *)
  * annotation list (* zero or more *)
  * identifier (*tok*)
)

and select_clause = (
    pat_9d32f57
  * [
        `Count_exp of count_expression
      | `Sele_exp_rep_COMMA_sele_exp of selected_fields
    ]
)

and selectable_expression = [
    `Value_exp of value_expression
  | `Alias_exp of (
        value_expression
      * pat_79b8891 option
      * identifier (*tok*)
    )
  | `Type_of_clause of (
        pat_ed3b2b8
      * identifier (*tok*)
      * when_expression list (* zero or more *)
      * else_expression option
      * pat_dc73728
    )
  | `Fields_exp of (
        pat_5f24f83 * Token.t (* "(" *) * fields_type * Token.t (* ")" *)
    )
  | `Subq of subquery
]

and selected_fields = (
    selectable_expression
  * (Token.t (* "," *) * selectable_expression) list (* zero or more *)
)

and simple_type = [
    `Void_type of void_type
  | `Inte_type of integral_type
  | `Floa_point_type of floating_point_type
  | `Bool_type of Token.t (* "boolean" *)
  | `Id of identifier (*tok*)
  | `Scoped_type_id of scoped_type_identifier
  | `Gene_type of generic_type
]

and sobject_return = (
    identifier (*tok*)
  * (
        Token.t (* "(" *)
      * selected_fields
      * using_clause option
      * where_clause option
      * order_by_clause option
      * limit_clause option
      * offset_clause option
      * Token.t (* ")" *)
    )
      option
)

and soql_query = soql_query_expression

and soql_query_body = (
    select_clause
  * from_clause
  * soql_using_clause option
  * where_clause option
  * soql_with_clause option
  * group_by_clause option
  * order_by_clause option
  * limit_clause option
  * offset_clause option
  * for_clause option
  * update_clause option
  * all_rows_clause option
)

and soql_query_expression = soql_query_body

and sosl_query = query_expression_

and sosl_query_body = (
    find_clause
  * in_clause option
  * returning_clause list (* zero or more *) option
  * sosl_with_clause list (* zero or more *) option
  * limit_clause option
  * offset_clause option
  * update_clause option
)

and sosl_with_clause = (pat_1618b1a * sosl_with_type)

and sosl_with_type = [
    `With_data_cat_exp of with_data_cat_expression
  | `With_divi_exp of (
        pat_65f3c46
      * Token.t (* "=" *)
      * [
            `Bound_apex_exp of bound_apex_expression
          | `Str_lit of string_literal (*tok*)
        ]
    )
  | `With_high of with_highlight
  | `With_meta_exp of (
        pat_8faa65a * Token.t (* "=" *) * string_literal (*tok*)
    )
  | `With_netw_exp of (pat_e0568e7 * comparison)
  | `With_pric_exp of (
        pat_2c570e1 * Token.t (* "=" *) * string_literal (*tok*)
    )
  | `With_snip_exp of (
        pat_18cabff
      * (
            Token.t (* "(" *) * pat_d7c68ba * Token.t (* "=" *)
          * int_ (*tok*) * Token.t (* ")" *)
        )
          option
    )
  | `With_spell_corr_exp of (pat_377158e * Token.t (* "=" *) * boolean)
]

and statement = [
    `Decl of declaration
  | `Exp_stmt of (expression * Token.t (* ";" *))
  | `Labe_stmt of (identifier (*tok*) * Token.t (* ":" *) * statement)
  | `If_stmt of (
        pat_da2756d
      * parenthesized_expression
      * statement
      * (pat_b4abcb1 * statement) option
    )
  | `While_stmt of (pat_1137973 * parenthesized_expression * statement)
  | `For_stmt of (
        pat_8ae5cef
      * Token.t (* "(" *)
      * [
            `Local_var_decl of local_variable_declaration
          | `Opt_exp_rep_COMMA_exp_SEMI of (
                anon_exp_rep_COMMA_exp_0bb260c option
              * Token.t (* ";" *)
            )
        ]
      * expression option
      * Token.t (* ";" *)
      * anon_exp_rep_COMMA_exp_0bb260c option
      * Token.t (* ")" *)
      * statement
    )
  | `Enha_for_stmt of (
        pat_8ae5cef
      * Token.t (* "(" *)
      * modifiers option
      * unannotated_type
      * variable_declarator_id
      * Token.t (* ":" *)
      * expression
      * Token.t (* ")" *)
      * statement
    )
  | `Blk of trigger_body
  | `SEMI of Token.t (* ";" *)
  | `Do_stmt of (
        pat_4297c98 * statement * pat_1137973 * parenthesized_expression
      * Token.t (* ";" *)
    )
  | `Brk_stmt of (
        pat_dd36a63
      * identifier (*tok*) option
      * Token.t (* ";" *)
    )
  | `Cont_stmt of (
        pat_ad43c45
      * identifier (*tok*) option
      * Token.t (* ";" *)
    )
  | `Ret_stmt of (pat_2539e50 * expression option * Token.t (* ";" *))
  | `Switch_exp of switch_expression
  | `Local_var_decl of local_variable_declaration
  | `Throw_stmt of (pat_6533f64 * expression * Token.t (* ";" *))
  | `Try_stmt of (
        pat_ba29bfc
      * trigger_body
      * [
            `Rep1_catch_clause of catch_clause list (* one or more *)
          | `Rep_catch_clause_fina_clause of (
                catch_clause list (* zero or more *)
              * finally_clause
            )
        ]
    )
  | `Run_as_stmt of (pat_e8c36c5 * parenthesized_expression * trigger_body)
]

and subquery = (
    Token.t (* "(" *) * soql_query_expression * Token.t (* ")" *)
)

and superclass = (pat_862500c * type_)

and switch_block = (
    Token.t (* "{" *)
  * switch_rule list (* one or more *)
  * Token.t (* "}" *)
)

and switch_expression = (
    pat_dad77c5 * pat_0fd6b76 * expression * switch_block
)

and switch_label = (
    pat_06b4797
  * [
        `Opt_unan_type_id_rep_COMMA_opt_unan_type_id of (
            unannotated_type option
          * identifier (*tok*)
          * (
                Token.t (* "," *)
              * unannotated_type option
              * identifier (*tok*)
            )
              list (* zero or more *)
        )
      | `Lit_rep_COMMA_lit of (
            literal
          * (Token.t (* "," *) * literal) list (* zero or more *)
        )
      | `Pat_b4abcb1 of pat_b4abcb1
    ]
)

and switch_rule = (switch_label * trigger_body)

and trigger_body = block

and type_ = [
    `Unan_type of unannotated_type
  | `Anno_type of (annotation list (* one or more *) * unannotated_type)
]

and type_arguments = (
    Token.t (* "<" *)
  * type_list option
  * Token.t (* ">" *)
)

and type_bound = (
    pat_862500c
  * type_
  * (Token.t (* "&" *) * type_) list (* zero or more *)
)

and type_list = (type_ * (Token.t (* "," *) * type_) list (* zero or more *))

and type_parameter = (
    annotation list (* zero or more *)
  * identifier (*tok*)
  * type_bound option
)

and type_parameters = (
    Token.t (* "<" *)
  * type_parameter
  * (Token.t (* "," *) * type_parameter) list (* zero or more *)
  * Token.t (* ">" *)
)

and unannotated_type = [
    `Choice_void_type of simple_type
  | `Array_type of (unannotated_type * dimensions)
]

and unary_expression = [
    `PLUS_exp of (Token.t (* "+" *) * expression)
  | `DASH_exp of (Token.t (* "-" *) * expression)
  | `BANG_exp of (Token.t (* "!" *) * expression)
  | `TILDE_exp of (Token.t (* "~" *) * expression)
]

and unqualified_object_creation_expression = (
    pat_5ae1624
  * type_arguments option
  * simple_type
  * argument_list
  * class_body option
)

and update_expression = [
    `Exp_PLUSPLUS of (expression * Token.t (* "++" *))
  | `Exp_DASHDASH of (expression * Token.t (* "--" *))
  | `PLUSPLUS_exp of (Token.t (* "++" *) * expression)
  | `DASHDASH_exp of (Token.t (* "--" *) * expression)
]

and value_expression = [
    `Func_exp of function_expression
  | `Field_id of field_identifier
]

and variable_declarator = (
    variable_declarator_id
  * (Token.t (* "=" *) * variable_initializer) option
)

and variable_declarator_list = (
    variable_declarator
  * (Token.t (* "," *) * variable_declarator) list (* zero or more *)
)

and variable_initializer = [
    `Exp of expression
  | `Array_init of array_initializer
]

and where_clause = (pat_41486aa * boolean_expression)
[@@deriving sexp_of]

type parser_output = declaration list (* zero or more *)
[@@deriving sexp_of]

type term_separator_start (* inlined *) = Token.t (* "'" *)
[@@deriving sexp_of]

type boolean_type (* inlined *) = Token.t (* "boolean" *)
[@@deriving sexp_of]

type term_separator_end (* inlined *) = Token.t (* "'" *)
[@@deriving sexp_of]

type comment (* inlined *) = [
    `Line_comm_expl of line_comment_explicit (*tok*)
  | `Blk_comm_expl of block_comment_explicit (*tok*)
]
[@@deriving sexp_of]

type with_user_id_type (* inlined *) = (
    pat_cf91efa * Token.t (* "=" *) * string_literal (*tok*)
)
[@@deriving sexp_of]

type dummy_alias0 (* inlined *) = block_comment (*tok*)
[@@deriving sexp_of]

type with_metadata_expression (* inlined *) = (
    pat_8faa65a * Token.t (* "=" *) * string_literal (*tok*)
)
[@@deriving sexp_of]

type apex_method_identifier (* inlined *) = (
    identifier (*tok*) * Token.t (* "(" *) * Token.t (* ")" *)
)
[@@deriving sexp_of]

type break_statement (* inlined *) = (
    pat_dd36a63
  * identifier (*tok*) option
  * Token.t (* ";" *)
)
[@@deriving sexp_of]

type continue_statement (* inlined *) = (
    pat_ad43c45
  * identifier (*tok*) option
  * Token.t (* ";" *)
)
[@@deriving sexp_of]

type scoped_identifier (* inlined *) = (
    name * Token.t (* "." *) * identifier (*tok*)
)
[@@deriving sexp_of]

type date_literal_with_param (* inlined *) = (
    tok_choice_pat_f0b577b * Token.t (* ":" *) * int_ (*tok*)
)
[@@deriving sexp_of]

type with_snippet_expression (* inlined *) = (
    pat_18cabff
  * (
        Token.t (* "(" *) * pat_d7c68ba * Token.t (* "=" *) * int_ (*tok*)
      * Token.t (* ")" *)
    )
      option
)
[@@deriving sexp_of]

type with_pricebook_expression (* inlined *) = (
    pat_2c570e1 * Token.t (* "=" *) * string_literal (*tok*)
)
[@@deriving sexp_of]

type dummy_alias1 (* inlined *) = line_comment (*tok*)
[@@deriving sexp_of]

type fields_expression (* inlined *) = (
    pat_5f24f83 * Token.t (* "(" *) * fields_type * Token.t (* ")" *)
)
[@@deriving sexp_of]

type with_spell_correction_expression (* inlined *) = (
    pat_377158e * Token.t (* "=" *) * boolean
)
[@@deriving sexp_of]

type with_record_visibility_expression (* inlined *) = (
    pat_be3e515
  * Token.t (* "(" *)
  * with_record_visibility_param
  * (Token.t (* "," *) * with_record_visibility_param)
      list (* zero or more *)
  * Token.t (* ")" *)
)
[@@deriving sexp_of]

type apex_identifier (* inlined *) = (
    anon_choice_id_73106c9
  * (Token.t (* "?" *) option * Token.t (* "." *) * anon_choice_id_73106c9)
      list (* zero or more *)
)
[@@deriving sexp_of]

type storage_alias (* inlined *) = (
    storage_identifier
  * pat_79b8891 option
  * identifier (*tok*)
)
[@@deriving sexp_of]

type type_of_clause (* inlined *) = (
    pat_ed3b2b8
  * identifier (*tok*)
  * when_expression list (* zero or more *)
  * else_expression option
  * pat_dc73728
)
[@@deriving sexp_of]

type alias_expression (* inlined *) = (
    value_expression
  * pat_79b8891 option
  * identifier (*tok*)
)
[@@deriving sexp_of]

type and_expression (* inlined *) = (
    condition_expression
  * (pat_a0fe1a6 * condition_expression) list (* one or more *)
)
[@@deriving sexp_of]

type annotated_type (* inlined *) = (
    annotation list (* one or more *)
  * unannotated_type
)
[@@deriving sexp_of]

type array_creation_expression (* inlined *) = (
    pat_5ae1624
  * simple_type
  * [
        `Rep1_dimens_expr_opt_dimens of (
            dimensions_expr list (* one or more *)
          * dimensions option
        )
      | `Dimens_array_init of (dimensions * array_initializer)
      | `Array_init of array_initializer
    ]
)
[@@deriving sexp_of]

type array_type (* inlined *) = (unannotated_type * dimensions)
[@@deriving sexp_of]

type assignment_expression (* inlined *) = (
    [
        `Id of identifier (*tok*)
      | `Field_access of field_access
      | `Array_access of array_access
    ]
  * [
        `EQ of Token.t (* "=" *)
      | `PLUSEQ of Token.t (* "+=" *)
      | `DASHEQ of Token.t (* "-=" *)
      | `STAREQ of Token.t (* "*=" *)
      | `SLASHEQ of Token.t (* "/=" *)
      | `AMPEQ of Token.t (* "&=" *)
      | `BAREQ of Token.t (* "|=" *)
      | `HATEQ of Token.t (* "^=" *)
      | `PERCEQ of Token.t (* "%=" *)
      | `LTLTEQ of Token.t (* "<<=" *)
      | `GTGTEQ of Token.t (* ">>=" *)
      | `GTGTGTEQ of Token.t (* ">>>=" *)
    ]
  * expression
)
[@@deriving sexp_of]

type cast_expression (* inlined *) = (
    Token.t (* "(" *) * type_ * Token.t (* ")" *) * expression
)
[@@deriving sexp_of]

type class_literal (* inlined *) = (
    unannotated_type * Token.t (* "." *) * pat_a7a1629
)
[@@deriving sexp_of]

type comparison_expression (* inlined *) = (value_expression * comparison)
[@@deriving sexp_of]

type constructor_declaration (* inlined *) = (
    modifiers option
  * constructor_declarator
  * constructor_body
)
[@@deriving sexp_of]

type do_statement (* inlined *) = (
    pat_4297c98 * statement * pat_1137973 * parenthesized_expression
  * Token.t (* ";" *)
)
[@@deriving sexp_of]

type element_value_array_initializer (* inlined *) = (
    Token.t (* "{" *)
  * (
        element_value
      * (Token.t (* "," *) * element_value) list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)
[@@deriving sexp_of]

type enhanced_for_statement (* inlined *) = (
    pat_8ae5cef
  * Token.t (* "(" *)
  * modifiers option
  * unannotated_type
  * variable_declarator_id
  * Token.t (* ":" *)
  * expression
  * Token.t (* ")" *)
  * statement
)
[@@deriving sexp_of]

type expression_statement (* inlined *) = (expression * Token.t (* ";" *))
[@@deriving sexp_of]

type field_declaration (* inlined *) = (
    modifiers option
  * unannotated_type
  * variable_declarator_list
  * [ `Acce_list of accessor_list | `SEMI of Token.t (* ";" *) ]
)
[@@deriving sexp_of]

type for_statement (* inlined *) = (
    pat_8ae5cef
  * Token.t (* "(" *)
  * [
        `Local_var_decl of local_variable_declaration
      | `Opt_exp_rep_COMMA_exp_SEMI of (
            anon_exp_rep_COMMA_exp_0bb260c option
          * Token.t (* ";" *)
        )
    ]
  * expression option
  * Token.t (* ";" *)
  * anon_exp_rep_COMMA_exp_0bb260c option
  * Token.t (* ")" *)
  * statement
)
[@@deriving sexp_of]

type having_and_expression (* inlined *) = (
    having_condition_expression
  * (pat_a0fe1a6 * having_condition_expression) list (* one or more *)
)
[@@deriving sexp_of]

type having_comparison_expression (* inlined *) = (
    function_expression * having_comparison
)
[@@deriving sexp_of]

type having_not_expression (* inlined *) = (
    pat_87c7e19 * having_condition_expression
)
[@@deriving sexp_of]

type having_or_expression (* inlined *) = (
    having_condition_expression
  * (pat_fb04618 * having_condition_expression) list (* one or more *)
)
[@@deriving sexp_of]

type having_set_comparison (* inlined *) = (
    set_comparison_operator
  * [
        `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR of
          anon_LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR_bea6d78
      | `Bound_apex_exp of bound_apex_expression
    ]
)
[@@deriving sexp_of]

type having_value_comparison (* inlined *) = (
    value_comparison_operator * anon_choice_soql_lit_3019e24
)
[@@deriving sexp_of]

type if_statement (* inlined *) = (
    pat_da2756d
  * parenthesized_expression
  * statement
  * (pat_b4abcb1 * statement) option
)
[@@deriving sexp_of]

type instanceof_expression (* inlined *) = (expression * pat_d58874b * type_)
[@@deriving sexp_of]

type labeled_statement (* inlined *) = (
    identifier (*tok*) * Token.t (* ":" *) * statement
)
[@@deriving sexp_of]

type map_creation_expression (* inlined *) = (
    pat_5ae1624 * simple_type * map_initializer
)
[@@deriving sexp_of]

type method_invocation (* inlined *) = (
    [
        `Id of identifier (*tok*)
      | `Choice_prim_exp_prop_navi_opt_super_prop_navi_opt_type_args_id of (
            anon_choice_prim_exp_bbf4eda
          * property_navigation
          * (super * property_navigation) option
          * type_arguments option
          * identifier (*tok*)
        )
    ]
  * argument_list
)
[@@deriving sexp_of]

type not_expression (* inlined *) = (pat_87c7e19 * condition_expression)
[@@deriving sexp_of]

type object_creation_expression (* inlined *) =
  unqualified_object_creation_expression
[@@deriving sexp_of]

type or_expression (* inlined *) = (
    condition_expression
  * (pat_fb04618 * condition_expression) list (* one or more *)
)
[@@deriving sexp_of]

type query_expression (* inlined *) = (
    Token.t (* "[" *)
  * [ `Soql_query of soql_query | `Sosl_query of sosl_query ]
  * Token.t (* "]" *)
)
[@@deriving sexp_of]

type return_statement (* inlined *) = (
    pat_2539e50
  * expression option
  * Token.t (* ";" *)
)
[@@deriving sexp_of]

type run_as_statement (* inlined *) = (
    pat_e8c36c5 * parenthesized_expression * trigger_body
)
[@@deriving sexp_of]

type set_comparison (* inlined *) = (
    set_comparison_operator
  * [
        `Subq of subquery
      | `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR of
          anon_LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR_bea6d78
      | `Bound_apex_exp of bound_apex_expression
    ]
)
[@@deriving sexp_of]

type static_initializer (* inlined *) = (pat_068a1b3 * trigger_body)
[@@deriving sexp_of]

type ternary_expression (* inlined *) = (
    expression * Token.t (* "?" *) * expression * Token.t (* ":" *)
  * expression
)
[@@deriving sexp_of]

type throw_statement (* inlined *) = (
    pat_6533f64 * expression * Token.t (* ";" *)
)
[@@deriving sexp_of]

type trigger_declaration (* inlined *) = (
    pat_f300483
  * identifier (*tok*)
  * pat_0fd6b76
  * identifier (*tok*)
  * Token.t (* "(" *)
  * trigger_event
  * (Token.t (* "," *) * trigger_event) list (* zero or more *)
  * Token.t (* ")" *)
  * trigger_body
)
[@@deriving sexp_of]

type try_statement (* inlined *) = (
    pat_ba29bfc
  * trigger_body
  * [
        `Rep1_catch_clause of catch_clause list (* one or more *)
      | `Rep_catch_clause_fina_clause of (
            catch_clause list (* zero or more *)
          * finally_clause
        )
    ]
)
[@@deriving sexp_of]

type value_comparison (* inlined *) = (
    value_comparison_operator * anon_choice_soql_lit_3019e24
)
[@@deriving sexp_of]

type while_statement (* inlined *) = (
    pat_1137973 * parenthesized_expression * statement
)
[@@deriving sexp_of]

type with_division_expression (* inlined *) = (
    pat_65f3c46
  * Token.t (* "=" *)
  * [
        `Bound_apex_exp of bound_apex_expression
      | `Str_lit of string_literal (*tok*)
    ]
)
[@@deriving sexp_of]

type with_network_expression (* inlined *) = (pat_e0568e7 * comparison)
[@@deriving sexp_of]

type default_value (* inlined *) = (Token.t (* "default" *) * element_value)
[@@deriving sexp_of]

let dump_tree root =
  sexp_of_parser_output root
  |> Print_sexp.to_stdout
