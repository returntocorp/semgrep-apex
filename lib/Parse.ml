(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_apex"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "line_comment";
  "block_comment";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_be37eaa", None;
  "decimal", None;
  "pat_2b19251", None;
  "pat_4799665", None;
  "pat_c743a5d", None;
  "pat_f039c98", None;
  "pat_4735214", None;
  "pat_c7cf9cb", None;
  "pat_46c2d71", None;
  "pat_885cdb9", None;
  "pat_f3342f2", None;
  "pat_ba29bfc", None;
  "pat_600cee9", None;
  "pat_821611e", None;
  "pat_e8c36c5", None;
  "pat_a80178e", None;
  "pat_9091f20", None;
  "pat_dad77c5", None;
  "pat_9d32f57", None;
  "pat_da2756d", None;
  "tok_choice_pat_f0b577b", None;
  "pat_ce482ba", None;
  "pat_06b4797", None;
  "pat_6533f64", None;
  "pat_81b900e", None;
  "pat_23179d4", None;
  "term", None;
  "pat_9aba201", None;
  "dimensions",
  Some (
    Repeat1 (
      Seq [
        Token (Literal "[");
        Token (Literal "]");
      ];
    );
  );
  "identifier", None;
  "pat_6d25e87", None;
  "pat_1c754b5", None;
  "pat_e6ddd3d", None;
  "pat_61878b9", None;
  "pat_ba503d3", None;
  "pat_315b95c", None;
  "pat_423b0d5", None;
  "pat_49c537b", None;
  "pat_fb04618", None;
  "pat_77427ea", None;
  "pat_15b4737", None;
  "pat_b14e0b2", None;
  "pat_c31f8b0", None;
  "pat_cb6bc7e", None;
  "pat_e1bb1f1", None;
  "pat_65f3c46", None;
  "pat_867e13f", None;
  "decimal_floating_point_literal", None;
  "pat_feedc91", None;
  "date_time", None;
  "pat_ab35017", None;
  "property_navigation",
  Some (
    Seq [
      Opt (
        Token (Literal "?");
      );
      Token (Literal ".");
    ];
  );
  "pat_fd35955", None;
  "pat_d1b1252", None;
  "pat_5d839fb", None;
  "pat_dd36a63", None;
  "pat_118aa93", None;
  "pat_8faa65a", None;
  "pat_c5aab40", None;
  "term_separator_start", None;
  "pat_9f5c53b", None;
  "pat_862500c", None;
  "pat_87c7e19", None;
  "pat_7a0d0ac", None;
  "term_separator_end", None;
  "pat_954cb76", None;
  "pat_cd35211", None;
  "pat_e563493", None;
  "pat_32d28c5", None;
  "pat_30c8ad0", None;
  "pat_be3e515", None;
  "pat_aacb7e0", None;
  "pat_a9304a9", None;
  "pat_6876c9d", None;
  "pat_e7af17e", None;
  "pat_f571821", None;
  "pat_8c31969", None;
  "pat_182a8c2", None;
  "pat_5f24f83", None;
  "pat_c1f1c76", None;
  "pat_a0fe1a6", None;
  "pat_20c5c21", None;
  "pat_1618b1a", None;
  "pat_38432dc", None;
  "pat_5eaae97", None;
  "pat_b0ca2e7", None;
  "pat_377158e", None;
  "pat_fa7b9eb", None;
  "pat_79b8891", None;
  "pat_9096c94", None;
  "pat_dc73728", None;
  "boolean_type", None;
  "pat_33bf837", None;
  "pat_aefd5f4", None;
  "pat_67603fa", None;
  "pat_b69dfa5", None;
  "pat_6a8d01f", None;
  "pat_4d80d01", None;
  "pat_a775992", None;
  "pat_6b8ef7f", None;
  "pat_0590266", None;
  "pat_d2a5196", None;
  "pat_1206b1e", None;
  "pat_c2f39fa", None;
  "pat_4ce7b58", None;
  "pat_db8575e", None;
  "date", None;
  "pat_54e7304", None;
  "pat_2c570e1", None;
  "pat_70e75fe", None;
  "pat_33e4156", None;
  "pat_0909a1e", None;
  "pat_2539e50", None;
  "pat_ed3b2b8", None;
  "pat_a4cd92e", None;
  "floating_point_type",
  Some (
    Alt [|
      Token (Literal "float");
      Token (Literal "double");
    |];
  );
  "pat_4297c98", None;
  "pat_e0568e7", None;
  "pat_1f32d9c", None;
  "pat_d58874b", None;
  "pat_d81286a", None;
  "pat_3dfbd59", None;
  "pat_246e68b", None;
  "pat_5d85530", None;
  "pat_2bc0ede", None;
  "pat_6938561", None;
  "pat_1f84923", None;
  "pat_73efeed", None;
  "pat_3b07412", None;
  "pat_4df3136", None;
  "pat_c9473ab", None;
  "pat_a7a1629", None;
  "pat_22ad91b", None;
  "pat_cf9b268", None;
  "pat_0a4d594", None;
  "pat_93ab6a0", None;
  "pat_3fda63a", None;
  "pat_e756b0a", None;
  "pat_d7c68ba", None;
  "currency_literal", None;
  "pat_f300483", None;
  "pat_04be41e", None;
  "pat_4d2cf55", None;
  "pat_8a4ef20", None;
  "pat_3525a4f", None;
  "int", None;
  "pat_e07a1d8", None;
  "pat_18cabff", None;
  "pat_06b7283", None;
  "pat_6f0580e", None;
  "pat_52321f4", None;
  "pat_cd34266", None;
  "pat_1137973", None;
  "pat_a6a7a4f", None;
  "pat_cf91efa", None;
  "pat_f5e99ef", None;
  "pat_9333026", None;
  "pat_5ae1624", None;
  "pat_90d8ac5", None;
  "pat_8fb2017", None;
  "pat_11dc5fc", None;
  "pat_9647ecb", None;
  "pat_58ecf42", None;
  "pat_7a53b06", None;
  "pat_0fd6b76", None;
  "pat_aaa65e9", None;
  "pat_218de4b", None;
  "pat_58e1c65", None;
  "pat_b4abcb1", None;
  "pat_21a3b9e", None;
  "pat_61d10d4", None;
  "pat_806eea7", None;
  "pat_8ae5cef", None;
  "pat_1f94420", None;
  "pat_ad43c45", None;
  "pat_068a1b3", None;
  "string_literal", None;
  "pat_ca28118", None;
  "pat_ee0612c", None;
  "pat_21131d9", None;
  "pat_374e277", None;
  "pat_3ed4486", None;
  "pat_a1c26dd", None;
  "pat_41486aa", None;
  "pat_58f9752", None;
  "integral_type",
  Some (
    Alt [|
      Token (Literal "byte");
      Token (Literal "short");
      Token (Literal "int");
      Token (Literal "long");
      Token (Literal "char");
    |];
  );
  "pat_3be512d", None;
  "pat_8eecf56", None;
  "pat_d02ea82", None;
  "pat_5a14059", None;
  "pat_b2a4845", None;
  "pat_18ac7a8", None;
  "pat_2d4f868", None;
  "pat_3256c3b", None;
  "super", Some (Token (Name "pat_4735214"););
  "variable_declarator_id",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Token (Name "dimensions");
      );
    ];
  );
  "dotted_identifier",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat1 (
        Seq [
          Token (Literal ".");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "scoped_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "count_expression",
  Some (
    Seq [
      Token (Name "pat_c31f8b0");
      Token (Literal "(");
      Token (Literal ")");
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Name "pat_dd36a63");
      Opt (
        Token (Name "identifier");
      );
      Token (Literal ";");
    ];
  );
  "set_comparison_operator",
  Some (
    Alt [|
      Token (Name "pat_a80178e");
      Seq [
        Token (Name "pat_87c7e19");
        Token (Name "pat_a80178e");
      ];
      Token (Name "pat_e1bb1f1");
      Token (Name "pat_ba503d3");
    |];
  );
  "with_highlight", Some (Token (Name "pat_8c31969"););
  "update_type",
  Some (
    Alt [|
      Token (Name "pat_867e13f");
      Token (Name "pat_6a8d01f");
    |];
  );
  "fields_type",
  Some (
    Alt [|
      Token (Name "pat_4ce7b58");
      Token (Name "pat_38432dc");
      Token (Name "pat_6d25e87");
    |];
  );
  "void_type", Some (Token (Name "pat_3fda63a"););
  "boolean",
  Some (
    Alt [|
      Token (Name "pat_7a0d0ac");
      Token (Name "pat_8a4ef20");
    |];
  );
  "date_literal_with_param",
  Some (
    Seq [
      Token (Name "tok_choice_pat_f0b577b");
      Token (Literal ":");
      Token (Name "int");
    ];
  );
  "order_null_direciton",
  Some (
    Alt [|
      Seq [
        Token (Name "pat_e07a1d8");
        Token (Name "pat_182a8c2");
      ];
      Seq [
        Token (Name "pat_e07a1d8");
        Token (Name "pat_e563493");
      ];
    |];
  );
  "with_snippet_expression",
  Some (
    Seq [
      Token (Name "pat_18cabff");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "pat_d7c68ba");
          Token (Literal "=");
          Token (Name "int");
          Token (Literal ")");
        ];
      );
    ];
  );
  "all_rows_clause",
  Some (
    Seq [
      Token (Name "pat_4ce7b58");
      Token (Name "pat_a6a7a4f");
    ];
  );
  "value_comparison_operator",
  Some (
    Alt [|
      Token (Literal "=");
      Token (Literal "!=");
      Token (Literal "<");
      Token (Literal "<=");
      Token (Literal ">");
      Token (Literal ">=");
      Token (Name "pat_9333026");
    |];
  );
  "trigger_event",
  Some (
    Alt [|
      Seq [
        Token (Name "pat_77427ea");
        Token (Name "pat_c1f1c76");
      ];
      Seq [
        Token (Name "pat_77427ea");
        Token (Name "pat_3b07412");
      ];
      Seq [
        Token (Name "pat_77427ea");
        Token (Name "pat_8fb2017");
      ];
      Seq [
        Token (Name "pat_61878b9");
        Token (Name "pat_c1f1c76");
      ];
      Seq [
        Token (Name "pat_61878b9");
        Token (Name "pat_3b07412");
      ];
      Seq [
        Token (Name "pat_61878b9");
        Token (Name "pat_8fb2017");
      ];
      Seq [
        Token (Name "pat_61878b9");
        Token (Name "pat_23179d4");
      ];
    |];
  );
  "dml_type",
  Some (
    Alt [|
      Token (Name "pat_c1f1c76");
      Token (Name "pat_3b07412");
      Token (Name "pat_8fb2017");
      Token (Name "pat_23179d4");
    |];
  );
  "for_type",
  Some (
    Alt [|
      Token (Name "pat_3b07412");
      Token (Name "pat_423b0d5");
      Token (Name "pat_11dc5fc");
    |];
  );
  "order_direction",
  Some (
    Alt [|
      Token (Name "pat_a4cd92e");
      Token (Name "pat_58ecf42");
    |];
  );
  "null_literal", Some (Token (Name "pat_7a53b06"););
  "continue_statement",
  Some (
    Seq [
      Token (Name "pat_ad43c45");
      Opt (
        Token (Name "identifier");
      );
      Token (Literal ";");
    ];
  );
  "modifier",
  Some (
    Alt [|
      Token (Name "pat_f5e99ef");
      Token (Name "pat_a9304a9");
      Token (Name "pat_b14e0b2");
      Token (Name "pat_954cb76");
      Token (Name "pat_be37eaa");
      Token (Name "pat_1206b1e");
      Token (Name "pat_06b7283");
      Token (Name "pat_246e68b");
      Token (Name "pat_068a1b3");
      Token (Name "pat_5d839fb");
      Token (Name "pat_33bf837");
      Seq [
        Token (Name "pat_1618b1a");
        Token (Name "pat_33e4156");
      ];
      Seq [
        Token (Name "pat_c2f39fa");
        Token (Name "pat_33e4156");
      ];
      Seq [
        Token (Name "pat_6f0580e");
        Token (Name "pat_33e4156");
      ];
    |];
  );
  "with_metadata_expression",
  Some (
    Seq [
      Token (Name "pat_8faa65a");
      Token (Literal "=");
      Token (Name "string_literal");
    ];
  );
  "with_user_id_type",
  Some (
    Seq [
      Token (Name "pat_cf91efa");
      Token (Literal "=");
      Token (Name "string_literal");
    ];
  );
  "with_pricebook_expression",
  Some (
    Seq [
      Token (Name "pat_2c570e1");
      Token (Literal "=");
      Token (Name "string_literal");
    ];
  );
  "this", Some (Token (Name "pat_ee0612c"););
  "using_clause",
  Some (
    Seq [
      Token (Name "pat_3be512d");
      Token (Name "pat_81b900e");
      Token (Literal "=");
      Token (Name "identifier");
    ];
  );
  "in_type",
  Some (
    Alt [|
      Token (Name "pat_4ce7b58");
      Token (Name "pat_d02ea82");
      Token (Name "pat_32d28c5");
      Token (Name "pat_cb6bc7e");
      Token (Name "pat_9096c94");
    |];
  );
  "with_data_cat_filter_type",
  Some (
    Alt [|
      Token (Name "pat_5a14059");
      Token (Name "pat_6938561");
      Token (Name "pat_2b19251");
      Token (Name "pat_118aa93");
    |];
  );
  "date_literal",
  Some (
    Alt [|
      Token (Name "pat_0909a1e");
      Token (Name "pat_93ab6a0");
      Token (Name "pat_ab35017");
      Token (Name "pat_cf9b268");
      Token (Name "pat_22ad91b");
      Token (Name "pat_73efeed");
      Token (Name "pat_1f32d9c");
      Token (Name "pat_6b8ef7f");
      Token (Name "pat_e7af17e");
      Token (Name "pat_cd34266");
      Token (Name "pat_c743a5d");
      Token (Name "pat_e756b0a");
      Token (Name "pat_fd35955");
      Token (Name "pat_d2a5196");
      Token (Name "pat_f3342f2");
      Token (Name "pat_b69dfa5");
      Token (Name "pat_218de4b");
      Token (Name "pat_cd35211");
      Token (Name "pat_52321f4");
      Token (Name "pat_c5aab40");
      Token (Name "pat_58e1c65");
      Token (Name "pat_600cee9");
      Token (Name "pat_18ac7a8");
    |];
  );
  "using_scope_type",
  Some (
    Alt [|
      Token (Name "pat_db8575e");
      Token (Name "pat_a775992");
      Token (Name "pat_2d4f868");
      Token (Name "pat_9647ecb");
      Token (Name "pat_4d80d01");
      Token (Name "pat_d81286a");
      Token (Name "pat_2bc0ede");
    |];
  );
  "function_name",
  Some (
    Alt [|
      Token (Name "pat_8eecf56");
      Token (Name "pat_c31f8b0");
      Token (Name "pat_aefd5f4");
      Token (Name "pat_feedc91");
      Token (Name "pat_46c2d71");
      Token (Name "pat_0590266");
      Token (Name "pat_4d2cf55");
      Token (Name "pat_3ed4486");
      Token (Name "pat_67603fa");
      Token (Name "pat_6876c9d");
      Token (Name "pat_3256c3b");
      Token (Name "pat_90d8ac5");
      Token (Name "pat_aacb7e0");
      Token (Name "pat_885cdb9");
      Token (Name "pat_315b95c");
      Token (Name "pat_aaa65e9");
      Token (Name "pat_9f5c53b");
      Token (Name "pat_a1c26dd");
      Token (Name "pat_374e277");
      Token (Name "pat_806eea7");
      Token (Name "pat_1c754b5");
      Token (Name "pat_3dfbd59");
      Token (Name "pat_58f9752");
    |];
  );
  "storage_identifier",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "dotted_identifier");
    |];
  );
  "field_identifier",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "dotted_identifier");
    |];
  );
  "field_list",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "dotted_identifier");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "identifier");
            Token (Name "dotted_identifier");
          |];
        ];
      );
    ];
  );
  "update_clause",
  Some (
    Seq [
      Token (Name "pat_3b07412");
      Token (Name "update_type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "update_type");
        ];
      );
    ];
  );
  "fields_expression",
  Some (
    Seq [
      Token (Name "pat_5f24f83");
      Token (Literal "(");
      Token (Name "fields_type");
      Token (Literal ")");
    ];
  );
  "with_spell_correction_expression",
  Some (
    Seq [
      Token (Name "pat_377158e");
      Token (Literal "=");
      Token (Name "boolean");
    ];
  );
  "with_record_visibility_param",
  Some (
    Alt [|
      Seq [
        Token (Name "pat_0a4d594");
        Token (Literal "=");
        Token (Name "int");
      ];
      Seq [
        Token (Name "pat_f571821");
        Token (Literal "=");
        Token (Name "boolean");
      ];
      Seq [
        Token (Name "pat_821611e");
        Token (Literal "=");
        Token (Name "boolean");
      ];
    |];
  );
  "for_clause",
  Some (
    Seq [
      Token (Name "pat_8ae5cef");
      Token (Name "for_type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "for_type");
        ];
      );
    ];
  );
  "literal",
  Some (
    Alt [|
      Token (Name "int");
      Token (Name "decimal_floating_point_literal");
      Token (Name "boolean");
      Token (Name "string_literal");
      Token (Name "null_literal");
    |];
  );
  "in_clause",
  Some (
    Seq [
      Token (Name "pat_a80178e");
      Token (Name "in_type");
      Token (Name "pat_5f24f83");
    ];
  );
  "with_data_cat_filter",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "with_data_cat_filter_type");
      Alt [|
        Token (Name "identifier");
        Seq [
          Token (Literal "(");
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
          Token (Literal ")");
        ];
      |];
    ];
  );
  "soql_literal",
  Some (
    Alt [|
      Token (Name "int");
      Token (Name "string_literal");
      Token (Name "date");
      Token (Name "date_time");
      Token (Name "boolean");
      Token (Name "date_literal");
      Token (Name "date_literal_with_param");
      Token (Name "currency_literal");
      Token (Name "null_literal");
    |];
  );
  "soql_using_clause",
  Some (
    Seq [
      Token (Name "pat_3be512d");
      Token (Name "pat_b0ca2e7");
      Token (Name "using_scope_type");
    ];
  );
  "storage_alias",
  Some (
    Seq [
      Token (Name "storage_identifier");
      Opt (
        Token (Name "pat_79b8891");
      );
      Token (Name "identifier");
    ];
  );
  "else_expression",
  Some (
    Seq [
      Token (Name "pat_b4abcb1");
      Token (Name "field_list");
    ];
  );
  "when_expression",
  Some (
    Seq [
      Token (Name "pat_06b4797");
      Token (Name "identifier");
      Token (Name "pat_70e75fe");
      Token (Name "field_list");
    ];
  );
  "with_record_visibility_expression",
  Some (
    Seq [
      Token (Name "pat_be3e515");
      Token (Literal "(");
      Token (Name "with_record_visibility_param");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "with_record_visibility_param");
        ];
      );
      Token (Literal ")");
    ];
  );
  "with_data_cat_expression",
  Some (
    Seq [
      Token (Name "pat_20c5c21");
      Token (Name "pat_c9473ab");
      Token (Name "with_data_cat_filter");
      Repeat (
        Seq [
          Token (Name "pat_a0fe1a6");
          Token (Name "with_data_cat_filter");
        ];
      );
    ];
  );
  "from_clause",
  Some (
    Seq [
      Token (Name "pat_5eaae97");
      Alt [|
        Token (Name "storage_identifier");
        Token (Name "storage_alias");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "storage_identifier");
            Token (Name "storage_alias");
          |];
        ];
      );
    ];
  );
  "type_of_clause",
  Some (
    Seq [
      Token (Name "pat_ed3b2b8");
      Token (Name "identifier");
      Repeat (
        Token (Name "when_expression");
      );
      Opt (
        Token (Name "else_expression");
      );
      Token (Name "pat_dc73728");
    ];
  );
  "soql_with_type",
  Some (
    Alt [|
      Token (Name "pat_fa7b9eb");
      Token (Name "pat_3525a4f");
      Token (Name "pat_1f84923");
      Token (Name "with_record_visibility_expression");
      Token (Name "with_data_cat_expression");
      Token (Name "with_user_id_type");
    |];
  );
  "soql_with_clause",
  Some (
    Seq [
      Token (Name "pat_1618b1a");
      Token (Name "soql_with_type");
    ];
  );
  "accessor_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Alt [|
        Token (Name "pat_04be41e");
        Token (Name "pat_9aba201");
      |];
      Alt [|
        Token (Name "block");
        Token (Literal ";");
      |];
    ];
  );
  "accessor_list",
  Some (
    Seq [
      Token (Literal "{");
      Repeat1 (
        Token (Name "accessor_declaration");
      );
      Token (Literal "}");
    ];
  );
  "alias_expression",
  Some (
    Seq [
      Token (Name "value_expression");
      Opt (
        Token (Name "pat_79b8891");
      );
      Token (Name "identifier");
    ];
  );
  "and_expression",
  Some (
    Seq [
      Token (Name "condition_expression");
      Repeat1 (
        Seq [
          Token (Name "pat_a0fe1a6");
          Token (Name "condition_expression");
        ];
      );
    ];
  );
  "annotated_type",
  Some (
    Seq [
      Repeat1 (
        Token (Name "annotation");
      );
      Token (Name "unannotated_type");
    ];
  );
  "annotation",
  Some (
    Seq [
      Token (Literal "@");
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_identifier");
      |];
      Opt (
        Token (Name "annotation_argument_list");
      );
    ];
  );
  "annotation_argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "element_value");
        Seq [
          Token (Name "annotation_key_value");
          Repeat (
            Seq [
              Opt (
                Token (Literal ",");
              );
              Token (Name "annotation_key_value");
            ];
          );
        ];
      |];
      Token (Literal ")");
    ];
  );
  "annotation_key_value",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "element_value");
    ];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array_access",
  Some (
    Seq [
      Token (Name "primary_expression");
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "array_creation_expression",
  Some (
    Seq [
      Token (Name "pat_5ae1624");
      Alt [|
        Token (Name "void_type");
        Token (Name "integral_type");
        Token (Name "floating_point_type");
        Token (Name "boolean_type");
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
      |];
      Alt [|
        Seq [
          Repeat1 (
            Token (Name "dimensions_expr");
          );
          Opt (
            Token (Name "dimensions");
          );
        ];
        Seq [
          Token (Name "dimensions");
          Token (Name "array_initializer");
        ];
        Seq [
          Token (Name "array_initializer");
        ];
      |];
    ];
  );
  "array_initializer",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "array_initializer");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "expression");
                Token (Name "array_initializer");
              |];
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "array_type",
  Some (
    Seq [
      Token (Name "unannotated_type");
      Token (Name "dimensions");
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "field_access");
        Token (Name "array_access");
      |];
      Alt [|
        Token (Literal "=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "&=");
        Token (Literal "|=");
        Token (Literal "^=");
        Token (Literal "%=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal ">>>=");
      |];
      Token (Name "expression");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "===");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>>");
        Token (Name "expression");
      ];
    |];
  );
  "block",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Token (Name "statement");
      );
      Token (Literal "}");
    ];
  );
  "boolean_expression",
  Some (
    Alt [|
      Token (Name "and_expression");
      Token (Name "or_expression");
      Token (Name "not_expression");
      Token (Name "condition_expression");
    |];
  );
  "bound_apex_expression",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "cast_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type");
      Token (Literal ")");
      Token (Name "expression");
    ];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Name "pat_4df3136");
      Token (Literal "(");
      Token (Name "catch_formal_parameter");
      Token (Literal ")");
      Token (Name "block");
    ];
  );
  "catch_formal_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_id");
    ];
  );
  "class_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "field_declaration");
          Token (Name "method_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Name "enum_declaration");
          Token (Name "block");
          Token (Name "static_initializer");
          Token (Name "constructor_declaration");
          Token (Literal ";");
        |];
      );
      Token (Literal "}");
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "pat_a7a1629");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "superclass");
      );
      Opt (
        Token (Name "interfaces");
      );
      Token (Name "class_body");
    ];
  );
  "class_literal",
  Some (
    Seq [
      Token (Name "unannotated_type");
      Token (Literal ".");
      Token (Name "pat_a7a1629");
    ];
  );
  "comparison",
  Some (
    Alt [|
      Token (Name "value_comparison");
      Token (Name "set_comparison");
    |];
  );
  "comparison_expression",
  Some (
    Seq [
      Token (Name "value_expression");
      Token (Name "comparison");
    ];
  );
  "condition_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Token (Name "boolean_expression");
        Token (Literal ")");
      ];
      Token (Name "comparison_expression");
    |];
  );
  "constant_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_list");
      Token (Literal ";");
    ];
  );
  "constructor_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "explicit_constructor_invocation");
      );
      Repeat (
        Token (Name "statement");
      );
      Token (Literal "}");
    ];
  );
  "constructor_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "constructor_declarator");
      Token (Name "constructor_body");
    ];
  );
  "constructor_declarator",
  Some (
    Seq [
      Opt (
        Token (Name "type_parameters");
      );
      Token (Name "identifier");
      Token (Name "formal_parameters");
    ];
  );
  "declaration",
  Some (
    Alt [|
      Token (Name "class_declaration");
      Token (Name "trigger_declaration");
      Token (Name "interface_declaration");
      Token (Name "enum_declaration");
    |];
  );
  "dimensions_expr",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "dml_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "dml_type");
        Token (Name "primary_expression");
      ];
      Seq [
        Token (Name "pat_9091f20");
        Token (Name "primary_expression");
        Opt (
          Token (Name "unannotated_type");
        );
      ];
      Seq [
        Token (Name "pat_4799665");
        Token (Name "primary_expression");
        Token (Name "identifier");
      ];
    |];
  );
  "do_statement",
  Some (
    Seq [
      Token (Name "pat_4297c98");
      Token (Name "statement");
      Token (Name "pat_1137973");
      Token (Name "parenthesized_expression");
      Token (Literal ";");
    ];
  );
  "element_value",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "element_value_array_initializer");
      Token (Name "annotation");
    |];
  );
  "element_value_array_initializer",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "element_value");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "element_value");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "enhanced_for_statement",
  Some (
    Seq [
      Token (Name "pat_8ae5cef");
      Token (Literal "(");
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_id");
      Token (Literal ":");
      Token (Name "expression");
      Token (Literal ")");
      Token (Name "statement");
    ];
  );
  "enum_body",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "enum_constant");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "enum_constant");
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "enum_constant",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "identifier");
    ];
  );
  "enum_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "pat_21a3b9e");
      Token (Name "identifier");
      Opt (
        Token (Name "interfaces");
      );
      Token (Name "enum_body");
    ];
  );
  "explicit_constructor_invocation",
  Some (
    Seq [
      Alt [|
        Seq [
          Opt (
            Token (Name "type_arguments");
          );
          Alt [|
            Token (Name "this");
            Token (Name "super");
          |];
        ];
        Seq [
          Alt [|
            Token (Name "primary_expression");
          |];
          Token (Literal ".");
          Opt (
            Token (Name "type_arguments");
          );
          Token (Name "super");
        ];
      |];
      Token (Name "argument_list");
      Token (Literal ";");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "assignment_expression");
      Token (Name "binary_expression");
      Token (Name "instanceof_expression");
      Token (Name "ternary_expression");
      Token (Name "update_expression");
      Token (Name "primary_expression");
      Token (Name "unary_expression");
      Token (Name "cast_expression");
      Token (Name "dml_expression");
      Token (Name "switch_expression");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "extends_interfaces",
  Some (
    Seq [
      Token (Name "pat_862500c");
      Token (Name "type_list");
    ];
  );
  "field_access",
  Some (
    Seq [
      Alt [|
        Token (Name "primary_expression");
        Token (Name "super");
      |];
      Opt (
        Seq [
          Token (Name "property_navigation");
          Token (Name "super");
        ];
      );
      Token (Name "property_navigation");
      Alt [|
        Token (Name "identifier");
        Token (Name "this");
      |];
    ];
  );
  "field_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_list");
      Alt [|
        Token (Name "accessor_list");
        Token (Literal ";");
      |];
    ];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Name "pat_f039c98");
      Token (Name "block");
    ];
  );
  "find_clause",
  Some (
    Seq [
      Token (Name "pat_54e7304");
      Alt [|
        Token (Name "bound_apex_expression");
        Seq [
          Token (Name "term_separator_start");
          Token (Name "term");
          Token (Name "term_separator_end");
        ];
      |];
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Name "pat_8ae5cef");
      Token (Literal "(");
      Alt [|
        Token (Name "local_variable_declaration");
        Seq [
          Opt (
            Seq [
              Token (Name "expression");
              Repeat (
                Seq [
                  Token (Literal ",");
                  Token (Name "expression");
                ];
              );
            ];
          );
          Token (Literal ";");
        ];
      |];
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
      Opt (
        Seq [
          Token (Name "expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "expression");
            ];
          );
        ];
      );
      Token (Literal ")");
      Token (Name "statement");
    ];
  );
  "formal_parameter",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_id");
    ];
  );
  "formal_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "formal_parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "formal_parameter");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "function_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "pat_21131d9");
        Token (Literal "(");
        Alt [|
          Token (Name "field_identifier");
          Token (Name "bound_apex_expression");
        |];
        Token (Literal ",");
        Token (Name "geo_location_type");
        Token (Literal ",");
        Token (Name "string_literal");
        Token (Literal ")");
      ];
      Seq [
        Token (Name "function_name");
        Token (Literal "(");
        Token (Name "value_expression");
        Token (Literal ")");
      ];
    |];
  );
  "generic_type",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
      |];
      Token (Name "type_arguments");
    ];
  );
  "geo_location_type",
  Some (
    Alt [|
      Token (Name "field_identifier");
      Token (Name "bound_apex_expression");
      Seq [
        Token (Name "pat_ca28118");
        Token (Literal "(");
        Token (Name "decimal");
        Token (Literal ",");
        Token (Name "decimal");
        Token (Literal ")");
      ];
    |];
  );
  "group_by_clause",
  Some (
    Seq [
      Token (Name "pat_d1b1252");
      Token (Name "pat_15b4737");
      Token (Name "group_by_expression");
      Opt (
        Token (Name "having_clause");
      );
    ];
  );
  "group_by_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "field_identifier");
          Token (Name "function_expression");
        |];
        Repeat (
          Seq [
            Token (Literal ",");
            Alt [|
              Token (Name "field_identifier");
              Token (Name "function_expression");
            |];
          ];
        );
      ];
      Seq [
        Alt [|
          Token (Name "pat_c7cf9cb");
          Token (Name "pat_5d85530");
        |];
        Token (Literal "(");
        Token (Name "field_identifier");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "field_identifier");
          ];
        );
        Token (Literal ")");
      ];
    |];
  );
  "having_and_expression",
  Some (
    Seq [
      Token (Name "having_condition_expression");
      Repeat1 (
        Seq [
          Token (Name "pat_a0fe1a6");
          Token (Name "having_condition_expression");
        ];
      );
    ];
  );
  "having_boolean_expression",
  Some (
    Alt [|
      Token (Name "having_and_expression");
      Token (Name "having_or_expression");
      Token (Name "having_not_expression");
      Token (Name "having_condition_expression");
    |];
  );
  "having_clause",
  Some (
    Seq [
      Token (Name "pat_30c8ad0");
      Token (Name "having_boolean_expression");
    ];
  );
  "having_comparison",
  Some (
    Alt [|
      Token (Name "having_value_comparison");
      Token (Name "having_set_comparison");
    |];
  );
  "having_comparison_expression",
  Some (
    Seq [
      Token (Name "function_expression");
      Token (Name "having_comparison");
    ];
  );
  "having_condition_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Token (Name "having_boolean_expression");
        Token (Literal ")");
      ];
      Token (Name "having_comparison_expression");
    |];
  );
  "having_not_expression",
  Some (
    Seq [
      Token (Name "pat_87c7e19");
      Token (Name "having_condition_expression");
    ];
  );
  "having_or_expression",
  Some (
    Seq [
      Token (Name "having_condition_expression");
      Repeat1 (
        Seq [
          Token (Name "pat_fb04618");
          Token (Name "having_condition_expression");
        ];
      );
    ];
  );
  "having_set_comparison",
  Some (
    Seq [
      Token (Name "set_comparison_operator");
      Alt [|
        Seq [
          Token (Literal "(");
          Alt [|
            Token (Name "soql_literal");
            Token (Name "bound_apex_expression");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "soql_literal");
                Token (Name "bound_apex_expression");
              |];
            ];
          );
          Token (Literal ")");
        ];
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "having_value_comparison",
  Some (
    Seq [
      Token (Name "value_comparison_operator");
      Alt [|
        Token (Name "soql_literal");
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Name "pat_da2756d");
      Token (Name "parenthesized_expression");
      Token (Name "statement");
      Opt (
        Seq [
          Token (Name "pat_b4abcb1");
          Token (Name "statement");
        ];
      );
    ];
  );
  "instanceof_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "pat_d58874b");
      Token (Name "type");
    ];
  );
  "interface_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "constant_declaration");
          Token (Name "enum_declaration");
          Token (Name "method_declaration");
          Token (Name "class_declaration");
          Token (Name "interface_declaration");
          Token (Literal ";");
        |];
      );
      Token (Literal "}");
    ];
  );
  "interface_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "pat_1f94420");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameters");
      );
      Opt (
        Token (Name "extends_interfaces");
      );
      Token (Name "interface_body");
    ];
  );
  "interfaces",
  Some (
    Seq [
      Token (Name "pat_e6ddd3d");
      Token (Name "type_list");
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "statement");
    ];
  );
  "limit_clause",
  Some (
    Seq [
      Token (Name "pat_49c537b");
      Alt [|
        Token (Name "int");
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "local_variable_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "unannotated_type");
      Token (Name "variable_declarator_list");
      Token (Literal ";");
    ];
  );
  "map_creation_expression",
  Some (
    Seq [
      Token (Name "pat_5ae1624");
      Alt [|
        Token (Name "void_type");
        Token (Name "integral_type");
        Token (Name "floating_point_type");
        Token (Name "boolean_type");
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
      |];
      Token (Name "map_initializer");
    ];
  );
  "map_initializer",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "map_initializer_");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "map_initializer_");
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "map_initializer_",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "=>");
      Token (Name "expression");
    ];
  );
  "method_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "modifiers");
      );
      Token (Name "method_header");
      Alt [|
        Token (Name "block");
        Token (Literal ";");
      |];
    ];
  );
  "method_declarator",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "formal_parameters");
      Opt (
        Token (Name "dimensions");
      );
    ];
  );
  "method_header",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "type_parameters");
          Repeat (
            Token (Name "annotation");
          );
        ];
      );
      Token (Name "unannotated_type");
      Token (Name "method_declarator");
    ];
  );
  "method_invocation",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Seq [
          Alt [|
            Token (Name "primary_expression");
            Token (Name "super");
          |];
          Token (Name "property_navigation");
          Opt (
            Seq [
              Token (Name "super");
              Token (Name "property_navigation");
            ];
          );
          Opt (
            Token (Name "type_arguments");
          );
          Token (Name "identifier");
        ];
      |];
      Token (Name "argument_list");
    ];
  );
  "modifiers",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "annotation");
        Token (Name "modifier");
      |];
    );
  );
  "not_expression",
  Some (
    Seq [
      Token (Name "pat_87c7e19");
      Token (Name "condition_expression");
    ];
  );
  "object_creation_expression",
  Some (
    Token (Name "unqualified_object_creation_expression");
  );
  "offset_clause",
  Some (
    Seq [
      Token (Name "pat_61d10d4");
      Alt [|
        Token (Name "int");
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "or_expression",
  Some (
    Seq [
      Token (Name "condition_expression");
      Repeat1 (
        Seq [
          Token (Name "pat_fb04618");
          Token (Name "condition_expression");
        ];
      );
    ];
  );
  "order_by_clause",
  Some (
    Seq [
      Token (Name "pat_ce482ba");
      Token (Name "pat_15b4737");
      Token (Name "order_expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "order_expression");
        ];
      );
    ];
  );
  "order_expression",
  Some (
    Seq [
      Token (Name "value_expression");
      Opt (
        Token (Name "order_direction");
      );
      Opt (
        Token (Name "order_null_direciton");
      );
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "primary_expression",
  Some (
    Alt [|
      Token (Name "literal");
      Token (Name "class_literal");
      Token (Name "this");
      Token (Name "identifier");
      Token (Name "parenthesized_expression");
      Token (Name "object_creation_expression");
      Token (Name "field_access");
      Token (Name "array_access");
      Token (Name "method_invocation");
      Token (Name "array_creation_expression");
      Token (Name "map_creation_expression");
      Token (Name "query_expression");
    |];
  );
  "query_expression",
  Some (
    Seq [
      Token (Literal "[");
      Alt [|
        Token (Name "soql_query");
        Token (Name "sosl_query");
      |];
      Token (Literal "]");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Name "pat_2539e50");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
    ];
  );
  "returning_clause",
  Some (
    Seq [
      Token (Name "pat_b2a4845");
      Token (Name "sobject_return");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "sobject_return");
        ];
      );
    ];
  );
  "run_as_statement",
  Some (
    Seq [
      Token (Name "pat_e8c36c5");
      Token (Name "parenthesized_expression");
      Token (Name "block");
    ];
  );
  "scoped_type_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
      |];
      Token (Literal ".");
      Repeat (
        Token (Name "annotation");
      );
      Token (Name "identifier");
    ];
  );
  "select_clause",
  Some (
    Seq [
      Token (Name "pat_9d32f57");
      Alt [|
        Token (Name "count_expression");
        Seq [
          Token (Name "selectable_expression");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "selectable_expression");
            ];
          );
        ];
      |];
    ];
  );
  "selectable_expression",
  Some (
    Alt [|
      Token (Name "value_expression");
      Token (Name "alias_expression");
      Token (Name "type_of_clause");
      Token (Name "fields_expression");
      Token (Name "subquery");
    |];
  );
  "selected_fields",
  Some (
    Seq [
      Token (Name "selectable_expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "selectable_expression");
        ];
      );
    ];
  );
  "set_comparison",
  Some (
    Seq [
      Token (Name "set_comparison_operator");
      Alt [|
        Token (Name "subquery");
        Seq [
          Token (Literal "(");
          Alt [|
            Token (Name "soql_literal");
            Token (Name "bound_apex_expression");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "soql_literal");
                Token (Name "bound_apex_expression");
              |];
            ];
          );
          Token (Literal ")");
        ];
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "sobject_return",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "selected_fields");
          Opt (
            Token (Name "using_clause");
          );
          Opt (
            Token (Name "where_clause");
          );
          Opt (
            Token (Name "order_by_clause");
          );
          Opt (
            Token (Name "limit_clause");
          );
          Opt (
            Token (Name "offset_clause");
          );
          Token (Literal ")");
        ];
      );
    ];
  );
  "soql_query",
  Some (
    Seq [
      Token (Name "soql_query_body");
    ];
  );
  "soql_query_body",
  Some (
    Seq [
      Token (Name "select_clause");
      Token (Name "from_clause");
      Opt (
        Token (Name "soql_using_clause");
      );
      Opt (
        Token (Name "where_clause");
      );
      Opt (
        Token (Name "soql_with_clause");
      );
      Opt (
        Token (Name "group_by_clause");
      );
      Opt (
        Token (Name "order_by_clause");
      );
      Opt (
        Token (Name "limit_clause");
      );
      Opt (
        Token (Name "offset_clause");
      );
      Opt (
        Token (Name "for_clause");
      );
      Opt (
        Token (Name "update_clause");
      );
      Opt (
        Token (Name "all_rows_clause");
      );
    ];
  );
  "sosl_query",
  Some (
    Seq [
      Token (Name "sosl_query_body");
    ];
  );
  "sosl_query_body",
  Some (
    Seq [
      Token (Name "find_clause");
      Opt (
        Token (Name "in_clause");
      );
      Opt (
        Repeat (
          Token (Name "returning_clause");
        );
      );
      Opt (
        Repeat (
          Token (Name "sosl_with_clause");
        );
      );
      Opt (
        Token (Name "limit_clause");
      );
      Opt (
        Token (Name "offset_clause");
      );
      Opt (
        Token (Name "update_clause");
      );
    ];
  );
  "sosl_with_clause",
  Some (
    Seq [
      Token (Name "pat_1618b1a");
      Token (Name "sosl_with_type");
    ];
  );
  "sosl_with_type",
  Some (
    Alt [|
      Token (Name "with_data_cat_expression");
      Token (Name "with_division_expression");
      Token (Name "with_highlight");
      Token (Name "with_metadata_expression");
      Token (Name "with_network_expression");
      Token (Name "with_pricebook_expression");
      Token (Name "with_snippet_expression");
      Token (Name "with_spell_correction_expression");
    |];
  );
  "statement",
  Some (
    Alt [|
      Token (Name "declaration");
      Token (Name "expression_statement");
      Token (Name "labeled_statement");
      Token (Name "if_statement");
      Token (Name "while_statement");
      Token (Name "for_statement");
      Token (Name "enhanced_for_statement");
      Token (Name "block");
      Token (Literal ";");
      Token (Name "do_statement");
      Token (Name "break_statement");
      Token (Name "continue_statement");
      Token (Name "return_statement");
      Token (Name "switch_expression");
      Token (Name "local_variable_declaration");
      Token (Name "throw_statement");
      Token (Name "try_statement");
      Token (Name "run_as_statement");
    |];
  );
  "static_initializer",
  Some (
    Seq [
      Token (Name "pat_068a1b3");
      Token (Name "block");
    ];
  );
  "subquery",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "soql_query_body");
      Token (Literal ")");
    ];
  );
  "superclass",
  Some (
    Seq [
      Token (Name "pat_862500c");
      Token (Name "type");
    ];
  );
  "switch_block",
  Some (
    Seq [
      Token (Literal "{");
      Repeat1 (
        Token (Name "switch_rule");
      );
      Token (Literal "}");
    ];
  );
  "switch_expression",
  Some (
    Seq [
      Token (Name "pat_dad77c5");
      Token (Name "pat_0fd6b76");
      Token (Name "expression");
      Token (Name "switch_block");
    ];
  );
  "switch_label",
  Some (
    Seq [
      Token (Name "pat_06b4797");
      Alt [|
        Seq [
          Opt (
            Token (Name "unannotated_type");
          );
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Token (Name "unannotated_type");
              );
              Token (Name "identifier");
            ];
          );
        ];
        Seq [
          Token (Name "literal");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "literal");
            ];
          );
        ];
        Token (Name "pat_b4abcb1");
      |];
    ];
  );
  "switch_rule",
  Some (
    Seq [
      Token (Name "switch_label");
      Token (Name "block");
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "?");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Name "pat_6533f64");
      Token (Name "expression");
      Token (Literal ";");
    ];
  );
  "trigger_body", Some (Token (Name "block"););
  "trigger_declaration",
  Some (
    Seq [
      Token (Name "pat_f300483");
      Token (Name "identifier");
      Token (Name "pat_0fd6b76");
      Token (Name "identifier");
      Token (Literal "(");
      Token (Name "trigger_event");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "trigger_event");
        ];
      );
      Token (Literal ")");
      Token (Name "trigger_body");
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Name "pat_ba29bfc");
      Token (Name "block");
      Alt [|
        Repeat1 (
          Token (Name "catch_clause");
        );
        Seq [
          Repeat (
            Token (Name "catch_clause");
          );
          Token (Name "finally_clause");
        ];
      |];
    ];
  );
  "type",
  Some (
    Alt [|
      Token (Name "unannotated_type");
      Token (Name "annotated_type");
    |];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Seq [
          Token (Name "type");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "type");
            ];
          );
        ];
      );
      Token (Literal ">");
    ];
  );
  "type_bound",
  Some (
    Seq [
      Token (Name "pat_862500c");
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal "&");
          Token (Name "type");
        ];
      );
    ];
  );
  "type_list",
  Some (
    Seq [
      Token (Name "type");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type");
        ];
      );
    ];
  );
  "type_parameter",
  Some (
    Seq [
      Repeat (
        Token (Name "annotation");
      );
      Token (Name "identifier");
      Opt (
        Token (Name "type_bound");
      );
    ];
  );
  "type_parameters",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "type_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_parameter");
        ];
      );
      Token (Literal ">");
    ];
  );
  "unannotated_type",
  Some (
    Alt [|
      Alt [|
        Token (Name "void_type");
        Token (Name "integral_type");
        Token (Name "floating_point_type");
        Token (Name "boolean_type");
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
      |];
      Token (Name "array_type");
    |];
  );
  "unary_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "!");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "~");
        Token (Name "expression");
      ];
    |];
  );
  "unqualified_object_creation_expression",
  Some (
    Seq [
      Token (Name "pat_5ae1624");
      Opt (
        Token (Name "type_arguments");
      );
      Alt [|
        Token (Name "void_type");
        Token (Name "integral_type");
        Token (Name "floating_point_type");
        Token (Name "boolean_type");
        Token (Name "identifier");
        Token (Name "scoped_type_identifier");
        Token (Name "generic_type");
      |];
      Token (Name "argument_list");
      Opt (
        Token (Name "class_body");
      );
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "++");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "--");
      ];
      Seq [
        Token (Literal "++");
        Token (Name "expression");
      ];
      Seq [
        Token (Literal "--");
        Token (Name "expression");
      ];
    |];
  );
  "value_comparison",
  Some (
    Seq [
      Token (Name "value_comparison_operator");
      Alt [|
        Token (Name "soql_literal");
        Token (Name "bound_apex_expression");
      |];
    ];
  );
  "value_expression",
  Some (
    Alt [|
      Token (Name "function_expression");
      Token (Name "field_identifier");
    |];
  );
  "variable_declarator",
  Some (
    Seq [
      Token (Name "variable_declarator_id");
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "expression");
            Token (Name "array_initializer");
          |];
        ];
      );
    ];
  );
  "variable_declarator_list",
  Some (
    Seq [
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
    ];
  );
  "where_clause",
  Some (
    Seq [
      Token (Name "pat_41486aa");
      Token (Name "boolean_expression");
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Name "pat_1137973");
      Token (Name "parenthesized_expression");
      Token (Name "statement");
    ];
  );
  "with_division_expression",
  Some (
    Seq [
      Token (Name "pat_65f3c46");
      Token (Literal "=");
      Alt [|
        Token (Name "bound_apex_expression");
        Token (Name "string_literal");
      |];
    ];
  );
  "with_network_expression",
  Some (
    Seq [
      Token (Name "pat_e0568e7");
      Token (Name "comparison");
    ];
  );
  "parser_output",
  Some (
    Repeat (
      Token (Name "declaration");
    );
  );
]

let trans_pat_be37eaa ((kind, body) : mt) : CST.pat_be37eaa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_decimal ((kind, body) : mt) : CST.decimal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2b19251 ((kind, body) : mt) : CST.pat_2b19251 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4799665 ((kind, body) : mt) : CST.pat_4799665 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c743a5d ((kind, body) : mt) : CST.pat_c743a5d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_f039c98 ((kind, body) : mt) : CST.pat_f039c98 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4735214 ((kind, body) : mt) : CST.pat_4735214 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c7cf9cb ((kind, body) : mt) : CST.pat_c7cf9cb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_46c2d71 ((kind, body) : mt) : CST.pat_46c2d71 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_885cdb9 ((kind, body) : mt) : CST.pat_885cdb9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f3342f2 ((kind, body) : mt) : CST.pat_f3342f2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ba29bfc ((kind, body) : mt) : CST.pat_ba29bfc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_600cee9 ((kind, body) : mt) : CST.pat_600cee9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_821611e ((kind, body) : mt) : CST.pat_821611e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e8c36c5 ((kind, body) : mt) : CST.pat_e8c36c5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a80178e ((kind, body) : mt) : CST.pat_a80178e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9091f20 ((kind, body) : mt) : CST.pat_9091f20 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dad77c5 ((kind, body) : mt) : CST.pat_dad77c5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9d32f57 ((kind, body) : mt) : CST.pat_9d32f57 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_da2756d ((kind, body) : mt) : CST.pat_da2756d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_choice_pat_f0b577b ((kind, body) : mt) : CST.tok_choice_pat_f0b577b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ce482ba ((kind, body) : mt) : CST.pat_ce482ba =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_06b4797 ((kind, body) : mt) : CST.pat_06b4797 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6533f64 ((kind, body) : mt) : CST.pat_6533f64 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_81b900e ((kind, body) : mt) : CST.pat_81b900e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_23179d4 ((kind, body) : mt) : CST.pat_23179d4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_term ((kind, body) : mt) : CST.term =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9aba201 ((kind, body) : mt) : CST.pat_9aba201 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_dimensions ((kind, body) : mt) : CST.dimensions =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Seq [v0; v1] ->
              (
                Run.trans_token (Run.matcher_token v0),
                Run.trans_token (Run.matcher_token v1)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6d25e87 ((kind, body) : mt) : CST.pat_6d25e87 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1c754b5 ((kind, body) : mt) : CST.pat_1c754b5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e6ddd3d ((kind, body) : mt) : CST.pat_e6ddd3d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_61878b9 ((kind, body) : mt) : CST.pat_61878b9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ba503d3 ((kind, body) : mt) : CST.pat_ba503d3 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_315b95c ((kind, body) : mt) : CST.pat_315b95c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_423b0d5 ((kind, body) : mt) : CST.pat_423b0d5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_49c537b ((kind, body) : mt) : CST.pat_49c537b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fb04618 ((kind, body) : mt) : CST.pat_fb04618 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_77427ea ((kind, body) : mt) : CST.pat_77427ea =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_15b4737 ((kind, body) : mt) : CST.pat_15b4737 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b14e0b2 ((kind, body) : mt) : CST.pat_b14e0b2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c31f8b0 ((kind, body) : mt) : CST.pat_c31f8b0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cb6bc7e ((kind, body) : mt) : CST.pat_cb6bc7e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e1bb1f1 ((kind, body) : mt) : CST.pat_e1bb1f1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_65f3c46 ((kind, body) : mt) : CST.pat_65f3c46 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_867e13f ((kind, body) : mt) : CST.pat_867e13f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_decimal_floating_point_literal ((kind, body) : mt) : CST.decimal_floating_point_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_feedc91 ((kind, body) : mt) : CST.pat_feedc91 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_date_time ((kind, body) : mt) : CST.date_time =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ab35017 ((kind, body) : mt) : CST.pat_ab35017 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_property_navigation ((kind, body) : mt) : CST.property_navigation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_fd35955 ((kind, body) : mt) : CST.pat_fd35955 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d1b1252 ((kind, body) : mt) : CST.pat_d1b1252 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5d839fb ((kind, body) : mt) : CST.pat_5d839fb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dd36a63 ((kind, body) : mt) : CST.pat_dd36a63 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_118aa93 ((kind, body) : mt) : CST.pat_118aa93 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8faa65a ((kind, body) : mt) : CST.pat_8faa65a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c5aab40 ((kind, body) : mt) : CST.pat_c5aab40 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_term_separator_start ((kind, body) : mt) : CST.term_separator_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9f5c53b ((kind, body) : mt) : CST.pat_9f5c53b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_862500c ((kind, body) : mt) : CST.pat_862500c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_87c7e19 ((kind, body) : mt) : CST.pat_87c7e19 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_7a0d0ac ((kind, body) : mt) : CST.pat_7a0d0ac =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_term_separator_end ((kind, body) : mt) : CST.term_separator_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_954cb76 ((kind, body) : mt) : CST.pat_954cb76 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cd35211 ((kind, body) : mt) : CST.pat_cd35211 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e563493 ((kind, body) : mt) : CST.pat_e563493 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_32d28c5 ((kind, body) : mt) : CST.pat_32d28c5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_30c8ad0 ((kind, body) : mt) : CST.pat_30c8ad0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_be3e515 ((kind, body) : mt) : CST.pat_be3e515 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_aacb7e0 ((kind, body) : mt) : CST.pat_aacb7e0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a9304a9 ((kind, body) : mt) : CST.pat_a9304a9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6876c9d ((kind, body) : mt) : CST.pat_6876c9d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e7af17e ((kind, body) : mt) : CST.pat_e7af17e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f571821 ((kind, body) : mt) : CST.pat_f571821 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8c31969 ((kind, body) : mt) : CST.pat_8c31969 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_182a8c2 ((kind, body) : mt) : CST.pat_182a8c2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_5f24f83 ((kind, body) : mt) : CST.pat_5f24f83 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c1f1c76 ((kind, body) : mt) : CST.pat_c1f1c76 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a0fe1a6 ((kind, body) : mt) : CST.pat_a0fe1a6 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_20c5c21 ((kind, body) : mt) : CST.pat_20c5c21 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1618b1a ((kind, body) : mt) : CST.pat_1618b1a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_38432dc ((kind, body) : mt) : CST.pat_38432dc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5eaae97 ((kind, body) : mt) : CST.pat_5eaae97 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b0ca2e7 ((kind, body) : mt) : CST.pat_b0ca2e7 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_377158e ((kind, body) : mt) : CST.pat_377158e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fa7b9eb ((kind, body) : mt) : CST.pat_fa7b9eb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_79b8891 ((kind, body) : mt) : CST.pat_79b8891 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9096c94 ((kind, body) : mt) : CST.pat_9096c94 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dc73728 ((kind, body) : mt) : CST.pat_dc73728 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_boolean_type ((kind, body) : mt) : CST.boolean_type =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_33bf837 ((kind, body) : mt) : CST.pat_33bf837 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_aefd5f4 ((kind, body) : mt) : CST.pat_aefd5f4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_67603fa ((kind, body) : mt) : CST.pat_67603fa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b69dfa5 ((kind, body) : mt) : CST.pat_b69dfa5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6a8d01f ((kind, body) : mt) : CST.pat_6a8d01f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4d80d01 ((kind, body) : mt) : CST.pat_4d80d01 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a775992 ((kind, body) : mt) : CST.pat_a775992 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6b8ef7f ((kind, body) : mt) : CST.pat_6b8ef7f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0590266 ((kind, body) : mt) : CST.pat_0590266 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d2a5196 ((kind, body) : mt) : CST.pat_d2a5196 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1206b1e ((kind, body) : mt) : CST.pat_1206b1e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c2f39fa ((kind, body) : mt) : CST.pat_c2f39fa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4ce7b58 ((kind, body) : mt) : CST.pat_4ce7b58 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_db8575e ((kind, body) : mt) : CST.pat_db8575e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_date ((kind, body) : mt) : CST.date =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_54e7304 ((kind, body) : mt) : CST.pat_54e7304 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2c570e1 ((kind, body) : mt) : CST.pat_2c570e1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_70e75fe ((kind, body) : mt) : CST.pat_70e75fe =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_33e4156 ((kind, body) : mt) : CST.pat_33e4156 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0909a1e ((kind, body) : mt) : CST.pat_0909a1e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2539e50 ((kind, body) : mt) : CST.pat_2539e50 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ed3b2b8 ((kind, body) : mt) : CST.pat_ed3b2b8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a4cd92e ((kind, body) : mt) : CST.pat_a4cd92e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_floating_point_type ((kind, body) : mt) : CST.floating_point_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Float (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Double (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_4297c98 ((kind, body) : mt) : CST.pat_4297c98 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e0568e7 ((kind, body) : mt) : CST.pat_e0568e7 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1f32d9c ((kind, body) : mt) : CST.pat_1f32d9c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d58874b ((kind, body) : mt) : CST.pat_d58874b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d81286a ((kind, body) : mt) : CST.pat_d81286a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3dfbd59 ((kind, body) : mt) : CST.pat_3dfbd59 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_246e68b ((kind, body) : mt) : CST.pat_246e68b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5d85530 ((kind, body) : mt) : CST.pat_5d85530 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2bc0ede ((kind, body) : mt) : CST.pat_2bc0ede =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6938561 ((kind, body) : mt) : CST.pat_6938561 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1f84923 ((kind, body) : mt) : CST.pat_1f84923 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_73efeed ((kind, body) : mt) : CST.pat_73efeed =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3b07412 ((kind, body) : mt) : CST.pat_3b07412 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4df3136 ((kind, body) : mt) : CST.pat_4df3136 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_c9473ab ((kind, body) : mt) : CST.pat_c9473ab =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a7a1629 ((kind, body) : mt) : CST.pat_a7a1629 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_22ad91b ((kind, body) : mt) : CST.pat_22ad91b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cf9b268 ((kind, body) : mt) : CST.pat_cf9b268 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0a4d594 ((kind, body) : mt) : CST.pat_0a4d594 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_93ab6a0 ((kind, body) : mt) : CST.pat_93ab6a0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3fda63a ((kind, body) : mt) : CST.pat_3fda63a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e756b0a ((kind, body) : mt) : CST.pat_e756b0a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d7c68ba ((kind, body) : mt) : CST.pat_d7c68ba =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_currency_literal ((kind, body) : mt) : CST.currency_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f300483 ((kind, body) : mt) : CST.pat_f300483 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_04be41e ((kind, body) : mt) : CST.pat_04be41e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4d2cf55 ((kind, body) : mt) : CST.pat_4d2cf55 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8a4ef20 ((kind, body) : mt) : CST.pat_8a4ef20 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3525a4f ((kind, body) : mt) : CST.pat_3525a4f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_int_ ((kind, body) : mt) : CST.int_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_e07a1d8 ((kind, body) : mt) : CST.pat_e07a1d8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_18cabff ((kind, body) : mt) : CST.pat_18cabff =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_06b7283 ((kind, body) : mt) : CST.pat_06b7283 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6f0580e ((kind, body) : mt) : CST.pat_6f0580e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_52321f4 ((kind, body) : mt) : CST.pat_52321f4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cd34266 ((kind, body) : mt) : CST.pat_cd34266 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1137973 ((kind, body) : mt) : CST.pat_1137973 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a6a7a4f ((kind, body) : mt) : CST.pat_a6a7a4f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cf91efa ((kind, body) : mt) : CST.pat_cf91efa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f5e99ef ((kind, body) : mt) : CST.pat_f5e99ef =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9333026 ((kind, body) : mt) : CST.pat_9333026 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5ae1624 ((kind, body) : mt) : CST.pat_5ae1624 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_90d8ac5 ((kind, body) : mt) : CST.pat_90d8ac5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8fb2017 ((kind, body) : mt) : CST.pat_8fb2017 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_11dc5fc ((kind, body) : mt) : CST.pat_11dc5fc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9647ecb ((kind, body) : mt) : CST.pat_9647ecb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_58ecf42 ((kind, body) : mt) : CST.pat_58ecf42 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_7a53b06 ((kind, body) : mt) : CST.pat_7a53b06 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0fd6b76 ((kind, body) : mt) : CST.pat_0fd6b76 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_aaa65e9 ((kind, body) : mt) : CST.pat_aaa65e9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_218de4b ((kind, body) : mt) : CST.pat_218de4b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_58e1c65 ((kind, body) : mt) : CST.pat_58e1c65 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b4abcb1 ((kind, body) : mt) : CST.pat_b4abcb1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_21a3b9e ((kind, body) : mt) : CST.pat_21a3b9e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_61d10d4 ((kind, body) : mt) : CST.pat_61d10d4 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_806eea7 ((kind, body) : mt) : CST.pat_806eea7 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8ae5cef ((kind, body) : mt) : CST.pat_8ae5cef =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1f94420 ((kind, body) : mt) : CST.pat_1f94420 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ad43c45 ((kind, body) : mt) : CST.pat_ad43c45 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_068a1b3 ((kind, body) : mt) : CST.pat_068a1b3 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ca28118 ((kind, body) : mt) : CST.pat_ca28118 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ee0612c ((kind, body) : mt) : CST.pat_ee0612c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_21131d9 ((kind, body) : mt) : CST.pat_21131d9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_374e277 ((kind, body) : mt) : CST.pat_374e277 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3ed4486 ((kind, body) : mt) : CST.pat_3ed4486 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a1c26dd ((kind, body) : mt) : CST.pat_a1c26dd =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_41486aa ((kind, body) : mt) : CST.pat_41486aa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_58f9752 ((kind, body) : mt) : CST.pat_58f9752 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integral_type ((kind, body) : mt) : CST.integral_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Byte (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Short (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Int (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Long (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Char (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_3be512d ((kind, body) : mt) : CST.pat_3be512d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8eecf56 ((kind, body) : mt) : CST.pat_8eecf56 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d02ea82 ((kind, body) : mt) : CST.pat_d02ea82 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5a14059 ((kind, body) : mt) : CST.pat_5a14059 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_b2a4845 ((kind, body) : mt) : CST.pat_b2a4845 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_18ac7a8 ((kind, body) : mt) : CST.pat_18ac7a8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2d4f868 ((kind, body) : mt) : CST.pat_2d4f868 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_3256c3b ((kind, body) : mt) : CST.pat_3256c3b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Children v ->
      trans_pat_4735214 (Run.matcher_token v)
  | Leaf _ -> assert false


let trans_variable_declarator_id ((kind, body) : mt) : CST.variable_declarator_id =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_dimensions (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_dotted_identifier ((kind, body) : mt) : CST.dotted_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_scoped_identifier ((kind, body) : mt) : CST.scoped_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_count_expression ((kind, body) : mt) : CST.count_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_c31f8b0 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_dd36a63 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_set_comparison_operator ((kind, body) : mt) : CST.set_comparison_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_a80178e (
            trans_pat_a80178e (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_87c7e19_pat_a80178e (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_87c7e19 (Run.matcher_token v0),
                  trans_pat_a80178e (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Pat_e1bb1f1 (
            trans_pat_e1bb1f1 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_ba503d3 (
            trans_pat_ba503d3 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_highlight ((kind, body) : mt) : CST.with_highlight =
  match body with
  | Children v ->
      trans_pat_8c31969 (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_update_type ((kind, body) : mt) : CST.update_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_867e13f (
            trans_pat_867e13f (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_6a8d01f (
            trans_pat_6a8d01f (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fields_type ((kind, body) : mt) : CST.fields_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_4ce7b58 (
            trans_pat_4ce7b58 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_38432dc (
            trans_pat_38432dc (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_6d25e87 (
            trans_pat_6d25e87 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_void_type ((kind, body) : mt) : CST.void_type =
  match body with
  | Children v ->
      trans_pat_3fda63a (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_boolean ((kind, body) : mt) : CST.boolean =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_7a0d0ac (
            trans_pat_7a0d0ac (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_8a4ef20 (
            trans_pat_8a4ef20 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_date_literal_with_param ((kind, body) : mt) : CST.date_literal_with_param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_tok_choice_pat_f0b577b (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_int_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_order_null_direciton ((kind, body) : mt) : CST.order_null_direciton =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_e07a1d8_pat_182a8c2 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_e07a1d8 (Run.matcher_token v0),
                  trans_pat_182a8c2 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Pat_e07a1d8_pat_e563493 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_e07a1d8 (Run.matcher_token v0),
                  trans_pat_e563493 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_snippet_expression ((kind, body) : mt) : CST.with_snippet_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_18cabff (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pat_d7c68ba (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2),
                      trans_int_ (Run.matcher_token v3),
                      Run.trans_token (Run.matcher_token v4)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_all_rows_clause ((kind, body) : mt) : CST.all_rows_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_4ce7b58 (Run.matcher_token v0),
            trans_pat_a6a7a4f (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_comparison_operator ((kind, body) : mt) : CST.value_comparison_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `EQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `BANGEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `LT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `LTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `GT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `GTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Pat_9333026 (
            trans_pat_9333026 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_trigger_event ((kind, body) : mt) : CST.trigger_event =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_77427ea_pat_c1f1c76 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_77427ea (Run.matcher_token v0),
                  trans_pat_c1f1c76 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Pat_77427ea_pat_3b07412 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_77427ea (Run.matcher_token v0),
                  trans_pat_3b07412 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Pat_77427ea_pat_8fb2017 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_77427ea (Run.matcher_token v0),
                  trans_pat_8fb2017 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Pat_61878b9_pat_c1f1c76 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_61878b9 (Run.matcher_token v0),
                  trans_pat_c1f1c76 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Pat_61878b9_pat_3b07412 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_61878b9 (Run.matcher_token v0),
                  trans_pat_3b07412 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Pat_61878b9_pat_8fb2017 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_61878b9 (Run.matcher_token v0),
                  trans_pat_8fb2017 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Pat_61878b9_pat_23179d4 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_61878b9 (Run.matcher_token v0),
                  trans_pat_23179d4 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_dml_type ((kind, body) : mt) : CST.dml_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_c1f1c76 (
            trans_pat_c1f1c76 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_3b07412 (
            trans_pat_3b07412 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_8fb2017 (
            trans_pat_8fb2017 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_23179d4 (
            trans_pat_23179d4 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_for_type ((kind, body) : mt) : CST.for_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_3b07412 (
            trans_pat_3b07412 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_423b0d5 (
            trans_pat_423b0d5 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_11dc5fc (
            trans_pat_11dc5fc (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_order_direction ((kind, body) : mt) : CST.order_direction =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_a4cd92e (
            trans_pat_a4cd92e (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_58ecf42 (
            trans_pat_58ecf42 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_null_literal ((kind, body) : mt) : CST.null_literal =
  match body with
  | Children v ->
      trans_pat_7a53b06 (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_ad43c45 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_modifier ((kind, body) : mt) : CST.modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_f5e99ef (
            trans_pat_f5e99ef (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_a9304a9 (
            trans_pat_a9304a9 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_b14e0b2 (
            trans_pat_b14e0b2 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_954cb76 (
            trans_pat_954cb76 (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pat_be37eaa (
            trans_pat_be37eaa (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Pat_1206b1e (
            trans_pat_1206b1e (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Pat_06b7283 (
            trans_pat_06b7283 (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Pat_246e68b (
            trans_pat_246e68b (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Pat_068a1b3 (
            trans_pat_068a1b3 (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Pat_5d839fb (
            trans_pat_5d839fb (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Pat_33bf837 (
            trans_pat_33bf837 (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Pat_1618b1a_pat_33e4156 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_1618b1a (Run.matcher_token v0),
                  trans_pat_33e4156 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Pat_c2f39fa_pat_33e4156 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_c2f39fa (Run.matcher_token v0),
                  trans_pat_33e4156 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Pat_6f0580e_pat_33e4156 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_6f0580e (Run.matcher_token v0),
                  trans_pat_33e4156 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_metadata_expression ((kind, body) : mt) : CST.with_metadata_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_8faa65a (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_string_literal (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_user_id_type ((kind, body) : mt) : CST.with_user_id_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_cf91efa (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_string_literal (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_pricebook_expression ((kind, body) : mt) : CST.with_pricebook_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_2c570e1 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_string_literal (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_this ((kind, body) : mt) : CST.this =
  match body with
  | Children v ->
      trans_pat_ee0612c (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_using_clause ((kind, body) : mt) : CST.using_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_3be512d (Run.matcher_token v0),
            trans_pat_81b900e (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_in_type ((kind, body) : mt) : CST.in_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_4ce7b58 (
            trans_pat_4ce7b58 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_d02ea82 (
            trans_pat_d02ea82 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_32d28c5 (
            trans_pat_32d28c5 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_cb6bc7e (
            trans_pat_cb6bc7e (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pat_9096c94 (
            trans_pat_9096c94 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_data_cat_filter_type ((kind, body) : mt) : CST.with_data_cat_filter_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_5a14059 (
            trans_pat_5a14059 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_6938561 (
            trans_pat_6938561 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_2b19251 (
            trans_pat_2b19251 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_118aa93 (
            trans_pat_118aa93 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_date_literal ((kind, body) : mt) : CST.date_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_0909a1e (
            trans_pat_0909a1e (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_93ab6a0 (
            trans_pat_93ab6a0 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_ab35017 (
            trans_pat_ab35017 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_cf9b268 (
            trans_pat_cf9b268 (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pat_22ad91b (
            trans_pat_22ad91b (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Pat_73efeed (
            trans_pat_73efeed (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Pat_1f32d9c (
            trans_pat_1f32d9c (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Pat_6b8ef7f (
            trans_pat_6b8ef7f (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Pat_e7af17e (
            trans_pat_e7af17e (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Pat_cd34266 (
            trans_pat_cd34266 (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Pat_c743a5d (
            trans_pat_c743a5d (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Pat_e756b0a (
            trans_pat_e756b0a (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Pat_fd35955 (
            trans_pat_fd35955 (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Pat_d2a5196 (
            trans_pat_d2a5196 (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Pat_f3342f2 (
            trans_pat_f3342f2 (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Pat_b69dfa5 (
            trans_pat_b69dfa5 (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Pat_218de4b (
            trans_pat_218de4b (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Pat_cd35211 (
            trans_pat_cd35211 (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Pat_52321f4 (
            trans_pat_52321f4 (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Pat_c5aab40 (
            trans_pat_c5aab40 (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Pat_58e1c65 (
            trans_pat_58e1c65 (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Pat_600cee9 (
            trans_pat_600cee9 (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Pat_18ac7a8 (
            trans_pat_18ac7a8 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_using_scope_type ((kind, body) : mt) : CST.using_scope_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_db8575e (
            trans_pat_db8575e (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_a775992 (
            trans_pat_a775992 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_2d4f868 (
            trans_pat_2d4f868 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_9647ecb (
            trans_pat_9647ecb (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pat_4d80d01 (
            trans_pat_4d80d01 (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Pat_d81286a (
            trans_pat_d81286a (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Pat_2bc0ede (
            trans_pat_2bc0ede (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_function_name ((kind, body) : mt) : CST.function_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_8eecf56 (
            trans_pat_8eecf56 (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_c31f8b0 (
            trans_pat_c31f8b0 (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_aefd5f4 (
            trans_pat_aefd5f4 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_feedc91 (
            trans_pat_feedc91 (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pat_46c2d71 (
            trans_pat_46c2d71 (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Pat_0590266 (
            trans_pat_0590266 (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Pat_4d2cf55 (
            trans_pat_4d2cf55 (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Pat_3ed4486 (
            trans_pat_3ed4486 (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Pat_67603fa (
            trans_pat_67603fa (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Pat_6876c9d (
            trans_pat_6876c9d (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Pat_3256c3b (
            trans_pat_3256c3b (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Pat_90d8ac5 (
            trans_pat_90d8ac5 (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Pat_aacb7e0 (
            trans_pat_aacb7e0 (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Pat_885cdb9 (
            trans_pat_885cdb9 (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Pat_315b95c (
            trans_pat_315b95c (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Pat_aaa65e9 (
            trans_pat_aaa65e9 (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Pat_9f5c53b (
            trans_pat_9f5c53b (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Pat_a1c26dd (
            trans_pat_a1c26dd (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Pat_374e277 (
            trans_pat_374e277 (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Pat_806eea7 (
            trans_pat_806eea7 (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Pat_1c754b5 (
            trans_pat_1c754b5 (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Pat_3dfbd59 (
            trans_pat_3dfbd59 (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Pat_58f9752 (
            trans_pat_58f9752 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_storage_identifier ((kind, body) : mt) : CST.storage_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Dotted_id (
            trans_dotted_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_identifier ((kind, body) : mt) : CST.field_identifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Dotted_id (
            trans_dotted_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_list ((kind, body) : mt) : CST.field_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Dotted_id (
                  trans_dotted_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Dotted_id (
                            trans_dotted_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_update_clause ((kind, body) : mt) : CST.update_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_3b07412 (Run.matcher_token v0),
            trans_update_type (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_update_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fields_expression ((kind, body) : mt) : CST.fields_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_5f24f83 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_fields_type (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_spell_correction_expression ((kind, body) : mt) : CST.with_spell_correction_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_377158e (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_boolean (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_record_visibility_param ((kind, body) : mt) : CST.with_record_visibility_param =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_0a4d594_EQ_int (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat_0a4d594 (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_int_ (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Pat_f571821_EQ_bool (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat_f571821 (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_boolean (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Pat_821611e_EQ_bool (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat_821611e (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_boolean (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_for_clause ((kind, body) : mt) : CST.for_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_8ae5cef (Run.matcher_token v0),
            trans_for_type (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_for_type (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal ((kind, body) : mt) : CST.literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Int (
            trans_int_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Deci_floa_point_lit (
            trans_decimal_floating_point_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Bool (
            trans_boolean (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Null_lit (
            trans_null_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_in_clause ((kind, body) : mt) : CST.in_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_a80178e (Run.matcher_token v0),
            trans_in_type (Run.matcher_token v1),
            trans_pat_5f24f83 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_data_cat_filter ((kind, body) : mt) : CST.with_data_cat_filter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_with_data_cat_filter_type (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_id_rep_COMMA_id_RPAR (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_identifier (Run.matcher_token v1),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_identifier (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_soql_literal ((kind, body) : mt) : CST.soql_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Int (
            trans_int_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Date (
            trans_date (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Date_time (
            trans_date_time (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Bool (
            trans_boolean (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Date_lit (
            trans_date_literal (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Date_lit_with_param (
            trans_date_literal_with_param (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Curr_lit (
            trans_currency_literal (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Null_lit (
            trans_null_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_soql_using_clause ((kind, body) : mt) : CST.soql_using_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_3be512d (Run.matcher_token v0),
            trans_pat_b0ca2e7 (Run.matcher_token v1),
            trans_using_scope_type (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_storage_alias ((kind, body) : mt) : CST.storage_alias =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_storage_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_pat_79b8891 (Run.matcher_token v))
              v1
            ,
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_else_expression ((kind, body) : mt) : CST.else_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_b4abcb1 (Run.matcher_token v0),
            trans_field_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_when_expression ((kind, body) : mt) : CST.when_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_06b4797 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            trans_pat_70e75fe (Run.matcher_token v2),
            trans_field_list (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_record_visibility_expression ((kind, body) : mt) : CST.with_record_visibility_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_be3e515 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_with_record_visibility_param (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_with_record_visibility_param (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_with_data_cat_expression ((kind, body) : mt) : CST.with_data_cat_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_20c5c21 (Run.matcher_token v0),
            trans_pat_c9473ab (Run.matcher_token v1),
            trans_with_data_cat_filter (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_a0fe1a6 (Run.matcher_token v0),
                      trans_with_data_cat_filter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_from_clause ((kind, body) : mt) : CST.from_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_5eaae97 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Stor_id (
                  trans_storage_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stor_alias (
                  trans_storage_alias (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Stor_id (
                            trans_storage_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Stor_alias (
                            trans_storage_alias (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_of_clause ((kind, body) : mt) : CST.type_of_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_ed3b2b8 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_when_expression (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_else_expression (Run.matcher_token v))
              v3
            ,
            trans_pat_dc73728 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_soql_with_type ((kind, body) : mt) : CST.soql_with_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_fa7b9eb (
            trans_pat_fa7b9eb (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_3525a4f (
            trans_pat_3525a4f (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_1f84923 (
            trans_pat_1f84923 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `With_record_visi_exp (
            trans_with_record_visibility_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `With_data_cat_exp (
            trans_with_data_cat_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `With_user_id_type (
            trans_with_user_id_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_soql_with_clause ((kind, body) : mt) : CST.soql_with_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_1618b1a (Run.matcher_token v0),
            trans_soql_with_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_accessor_declaration ((kind, body) : mt) : CST.accessor_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Pat_04be41e (
                  trans_pat_04be41e (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_9aba201 (
                  trans_pat_9aba201 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_accessor_list ((kind, body) : mt) : CST.accessor_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_accessor_declaration (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alias_expression ((kind, body) : mt) : CST.alias_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_value_expression (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_pat_79b8891 (Run.matcher_token v))
              v1
            ,
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_and_expression ((kind, body) : mt) : CST.and_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_condition_expression (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_a0fe1a6 (Run.matcher_token v0),
                      trans_condition_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotated_type ((kind, body) : mt) : CST.annotated_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat1
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotation ((kind, body) : mt) : CST.annotation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_id (
                  trans_scoped_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                trans_annotation_argument_list (Run.matcher_token v)
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotation_argument_list ((kind, body) : mt) : CST.annotation_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Elem_value (
                  trans_element_value (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Anno_key_value_rep_opt_COMMA_anno_key_value (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_annotation_key_value (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.opt
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_annotation_key_value (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_annotation_key_value ((kind, body) : mt) : CST.annotation_key_value =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_element_value (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_access ((kind, body) : mt) : CST.array_access =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_primary_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_creation_expression ((kind, body) : mt) : CST.array_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_5ae1624 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Void_type (
                  trans_void_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_type (
                  trans_integral_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Floa_point_type (
                  trans_floating_point_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool_type (
                  trans_boolean_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Rep1_dimens_expr_opt_dimens (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat1
                          (fun v -> trans_dimensions_expr (Run.matcher_token v))
                          v0
                        ,
                        Run.opt
                          (fun v -> trans_dimensions (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Dimens_array_init (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_dimensions (Run.matcher_token v0),
                        trans_array_initializer (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Array_init (
                  (match v with
                  | Seq [v0] ->
                      (trans_array_initializer (Run.matcher_token v0))
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_initializer ((kind, body) : mt) : CST.array_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Array_init (
                            trans_array_initializer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Array_init (
                                      trans_array_initializer (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type ((kind, body) : mt) : CST.array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_unannotated_type (Run.matcher_token v0),
            trans_dimensions (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Field_access (
                  trans_field_access (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_access (
                  trans_array_access (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `GTGTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_EQEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BANGEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_GTGTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_boolean_expression ((kind, body) : mt) : CST.boolean_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `And_exp (
            trans_and_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Or_exp (
            trans_or_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Not_exp (
            trans_not_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cond_exp (
            trans_condition_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bound_apex_expression ((kind, body) : mt) : CST.bound_apex_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cast_expression ((kind, body) : mt) : CST.cast_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_expression (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_4df3136 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_catch_formal_parameter (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_block (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_formal_parameter ((kind, body) : mt) : CST.catch_formal_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_variable_declarator_id (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_body ((kind, body) : mt) : CST.class_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Field_decl (
                      trans_field_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Meth_decl (
                      trans_method_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Blk (
                      trans_block (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Static_init (
                      trans_static_initializer (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Cons_decl (
                      trans_constructor_declaration (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_pat_a7a1629 (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_superclass (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_interfaces (Run.matcher_token v))
              v5
            ,
            trans_class_body (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_literal ((kind, body) : mt) : CST.class_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_unannotated_type (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat_a7a1629 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_comparison ((kind, body) : mt) : CST.comparison =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_comp (
            trans_value_comparison (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Set_comp (
            trans_set_comparison (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_comparison_expression ((kind, body) : mt) : CST.comparison_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_value_expression (Run.matcher_token v0),
            trans_comparison (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_condition_expression ((kind, body) : mt) : CST.condition_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_bool_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_boolean_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Comp_exp (
            trans_comparison_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constant_declaration ((kind, body) : mt) : CST.constant_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_variable_declarator_list (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_body ((kind, body) : mt) : CST.constructor_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_explicit_constructor_invocation (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v -> trans_statement (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_declaration ((kind, body) : mt) : CST.constructor_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_constructor_declarator (Run.matcher_token v1),
            trans_constructor_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_declarator ((kind, body) : mt) : CST.constructor_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            trans_formal_parameters (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_decl (
            trans_class_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Trig_decl (
            trans_trigger_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inte_decl (
            trans_interface_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Enum_decl (
            trans_enum_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dimensions_expr ((kind, body) : mt) : CST.dimensions_expr =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dml_expression ((kind, body) : mt) : CST.dml_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Dml_type_prim_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_dml_type (Run.matcher_token v0),
                  trans_primary_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Pat_9091f20_prim_exp_opt_unan_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat_9091f20 (Run.matcher_token v0),
                  trans_primary_expression (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_unannotated_type (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Pat_4799665_prim_exp_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat_4799665 (Run.matcher_token v0),
                  trans_primary_expression (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_4297c98 (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            trans_pat_1137973 (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_element_value ((kind, body) : mt) : CST.element_value =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Elem_value_array_init (
            trans_element_value_array_initializer (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Anno (
            trans_annotation (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_element_value_array_initializer ((kind, body) : mt) : CST.element_value_array_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_element_value (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_element_value (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enhanced_for_statement ((kind, body) : mt) : CST.enhanced_for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            trans_pat_8ae5cef (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v2
            ,
            trans_unannotated_type (Run.matcher_token v3),
            trans_variable_declarator_id (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_expression (Run.matcher_token v6),
            Run.trans_token (Run.matcher_token v7),
            trans_statement (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_body ((kind, body) : mt) : CST.enum_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_enum_constant (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_enum_constant (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_constant ((kind, body) : mt) : CST.enum_constant =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_enum_declaration ((kind, body) : mt) : CST.enum_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_pat_21a3b9e (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_interfaces (Run.matcher_token v))
              v3
            ,
            trans_enum_body (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_explicit_constructor_invocation ((kind, body) : mt) : CST.explicit_constructor_invocation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Opt_type_args_choice_this (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_type_arguments (Run.matcher_token v))
                          v0
                        ,
                        (match v1 with
                        | Alt (0, v) ->
                            `This (
                              trans_this (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Super (
                              trans_super (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_prim_exp_DOT_opt_type_args_super (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Prim_exp (
                              trans_primary_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> trans_type_arguments (Run.matcher_token v))
                          v2
                        ,
                        trans_super (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_argument_list (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inst_exp (
            trans_instanceof_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Tern_exp (
            trans_ternary_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Update_exp (
            trans_update_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prim_exp (
            trans_primary_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Cast_exp (
            trans_cast_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Dml_exp (
            trans_dml_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Switch_exp (
            trans_switch_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extends_interfaces ((kind, body) : mt) : CST.extends_interfaces =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_862500c (Run.matcher_token v0),
            trans_type_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_access ((kind, body) : mt) : CST.field_access =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Super (
                  trans_super (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_property_navigation (Run.matcher_token v0),
                      trans_super (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_property_navigation (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `This (
                  trans_this (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_variable_declarator_list (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Acce_list (
                  trans_accessor_list (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_f039c98 (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_find_clause ((kind, body) : mt) : CST.find_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_54e7304 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Term_sepa_start_term_term_sepa_end (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_term_separator_start (Run.matcher_token v0),
                        trans_term (Run.matcher_token v1),
                        trans_term_separator_end (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            trans_pat_8ae5cef (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Local_var_decl (
                  trans_local_variable_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Opt_exp_rep_COMMA_exp_SEMI (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_expression (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_expression (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.trans_token (Run.matcher_token v6),
            trans_statement (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameter ((kind, body) : mt) : CST.formal_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_variable_declarator_id (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameters ((kind, body) : mt) : CST.formal_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_formal_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_formal_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_expression ((kind, body) : mt) : CST.function_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_21131d9_LPAR_choice_field_id_COMMA_geo_loca_type_COMMA_str_lit_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
                (
                  trans_pat_21131d9 (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Field_id (
                        trans_field_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Bound_apex_exp (
                        trans_bound_apex_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v3),
                  trans_geo_location_type (Run.matcher_token v4),
                  Run.trans_token (Run.matcher_token v5),
                  trans_string_literal (Run.matcher_token v6),
                  Run.trans_token (Run.matcher_token v7)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Func_name_LPAR_value_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_function_name (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_value_expression (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type ((kind, body) : mt) : CST.generic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_geo_location_type ((kind, body) : mt) : CST.geo_location_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Field_id (
            trans_field_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bound_apex_exp (
            trans_bound_apex_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_ca28118_LPAR_deci_COMMA_deci_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  trans_pat_ca28118 (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_decimal (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3),
                  trans_decimal (Run.matcher_token v4),
                  Run.trans_token (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_group_by_clause ((kind, body) : mt) : CST.group_by_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_d1b1252 (Run.matcher_token v0),
            trans_pat_15b4737 (Run.matcher_token v1),
            trans_group_by_expression (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_having_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_group_by_expression ((kind, body) : mt) : CST.group_by_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_field_id_rep_COMMA_choice_field_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Field_id (
                        trans_field_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Func_exp (
                        trans_function_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Field_id (
                                  trans_field_identifier (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Func_exp (
                                  trans_function_expression (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_pat_c7cf9cb_LPAR_field_id_rep_COMMA_field_id_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Pat_c7cf9cb (
                        trans_pat_c7cf9cb (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pat_5d85530 (
                        trans_pat_5d85530 (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_field_identifier (Run.matcher_token v2),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_field_identifier (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v3
                  ,
                  Run.trans_token (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_and_expression ((kind, body) : mt) : CST.having_and_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_having_condition_expression (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_a0fe1a6 (Run.matcher_token v0),
                      trans_having_condition_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_boolean_expression ((kind, body) : mt) : CST.having_boolean_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Having_and_exp (
            trans_having_and_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Having_or_exp (
            trans_having_or_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Having_not_exp (
            trans_having_not_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Having_cond_exp (
            trans_having_condition_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_clause ((kind, body) : mt) : CST.having_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_30c8ad0 (Run.matcher_token v0),
            trans_having_boolean_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_comparison ((kind, body) : mt) : CST.having_comparison =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Having_value_comp (
            trans_having_value_comparison (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Having_set_comp (
            trans_having_set_comparison (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_comparison_expression ((kind, body) : mt) : CST.having_comparison_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_function_expression (Run.matcher_token v0),
            trans_having_comparison (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_condition_expression ((kind, body) : mt) : CST.having_condition_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_having_bool_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_having_boolean_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Having_comp_exp (
            trans_having_comparison_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_not_expression ((kind, body) : mt) : CST.having_not_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_87c7e19 (Run.matcher_token v0),
            trans_having_condition_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_or_expression ((kind, body) : mt) : CST.having_or_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_having_condition_expression (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_fb04618 (Run.matcher_token v0),
                      trans_having_condition_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_set_comparison ((kind, body) : mt) : CST.having_set_comparison =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_set_comparison_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Soql_lit (
                              trans_soql_literal (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Bound_apex_exp (
                              trans_bound_apex_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `Soql_lit (
                                        trans_soql_literal (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Bound_apex_exp (
                                        trans_bound_apex_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_having_value_comparison ((kind, body) : mt) : CST.having_value_comparison =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_value_comparison_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Soql_lit (
                  trans_soql_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_da2756d (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_b4abcb1 (Run.matcher_token v0),
                      trans_statement (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instanceof_expression ((kind, body) : mt) : CST.instanceof_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_pat_d58874b (Run.matcher_token v1),
            trans_type_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_body ((kind, body) : mt) : CST.interface_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Cst_decl (
                      trans_constant_declaration (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Enum_decl (
                      trans_enum_declaration (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Meth_decl (
                      trans_method_declaration (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Class_decl (
                      trans_class_declaration (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Inte_decl (
                      trans_interface_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_declaration ((kind, body) : mt) : CST.interface_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_pat_1f94420 (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_type_parameters (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_extends_interfaces (Run.matcher_token v))
              v4
            ,
            trans_interface_body (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interfaces ((kind, body) : mt) : CST.interfaces =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_e6ddd3d (Run.matcher_token v0),
            trans_type_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_limit_clause ((kind, body) : mt) : CST.limit_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_49c537b (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Int (
                  trans_int_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_variable_declaration ((kind, body) : mt) : CST.local_variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_variable_declarator_list (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_map_creation_expression ((kind, body) : mt) : CST.map_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_5ae1624 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Void_type (
                  trans_void_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_type (
                  trans_integral_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Floa_point_type (
                  trans_floating_point_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool_type (
                  trans_boolean_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_map_initializer (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_map_initializer ((kind, body) : mt) : CST.map_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_map_initializer_ (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_map_initializer_ (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_map_initializer_ ((kind, body) : mt) : CST.map_initializer_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_declaration ((kind, body) : mt) : CST.method_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_modifiers (Run.matcher_token v))
              v0
            ,
            trans_method_header (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_declarator ((kind, body) : mt) : CST.method_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_formal_parameters (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_dimensions (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_header ((kind, body) : mt) : CST.method_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_type_parameters (Run.matcher_token v0),
                      Run.repeat
                        (fun v -> trans_annotation (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_unannotated_type (Run.matcher_token v1),
            trans_method_declarator (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_invocation ((kind, body) : mt) : CST.method_invocation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_prim_exp_prop_navi_opt_super_prop_navi_opt_type_args_id (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Prim_exp (
                              trans_primary_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Super (
                              trans_super (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        trans_property_navigation (Run.matcher_token v1),
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_super (Run.matcher_token v0),
                                  trans_property_navigation (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.opt
                          (fun v -> trans_type_arguments (Run.matcher_token v))
                          v3
                        ,
                        trans_identifier (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_modifiers ((kind, body) : mt) : CST.modifiers =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Anno (
                trans_annotation (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Modi (
                trans_modifier (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_not_expression ((kind, body) : mt) : CST.not_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_87c7e19 (Run.matcher_token v0),
            trans_condition_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_creation_expression ((kind, body) : mt) : CST.object_creation_expression =
  match body with
  | Children v ->
      trans_unqualified_object_creation_expression (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_offset_clause ((kind, body) : mt) : CST.offset_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_61d10d4 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Int (
                  trans_int_ (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_or_expression ((kind, body) : mt) : CST.or_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_condition_expression (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_fb04618 (Run.matcher_token v0),
                      trans_condition_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_order_by_clause ((kind, body) : mt) : CST.order_by_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_ce482ba (Run.matcher_token v0),
            trans_pat_15b4737 (Run.matcher_token v1),
            trans_order_expression (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_order_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_order_expression ((kind, body) : mt) : CST.order_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_value_expression (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_order_direction (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_order_null_direciton (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_expression ((kind, body) : mt) : CST.primary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Lit (
            trans_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Class_lit (
            trans_class_literal (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `This (
            trans_this (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Obj_crea_exp (
            trans_object_creation_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Field_access (
            trans_field_access (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Array_access (
            trans_array_access (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Meth_invo (
            trans_method_invocation (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Array_crea_exp (
            trans_array_creation_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Map_crea_exp (
            trans_map_creation_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Query_exp (
            trans_query_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_query_expression ((kind, body) : mt) : CST.query_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Soql_query (
                  trans_soql_query (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sosl_query (
                  trans_sosl_query (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_2539e50 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_returning_clause ((kind, body) : mt) : CST.returning_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_b2a4845 (Run.matcher_token v0),
            trans_sobject_return (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_sobject_return (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_run_as_statement ((kind, body) : mt) : CST.run_as_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_e8c36c5 (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scoped_type_identifier ((kind, body) : mt) : CST.scoped_type_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v2
            ,
            trans_identifier (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_select_clause ((kind, body) : mt) : CST.select_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_9d32f57 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Count_exp (
                  trans_count_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sele_exp_rep_COMMA_sele_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_selectable_expression (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_selectable_expression (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selectable_expression ((kind, body) : mt) : CST.selectable_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_exp (
            trans_value_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Alias_exp (
            trans_alias_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type_of_clause (
            trans_type_of_clause (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Fields_exp (
            trans_fields_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Subq (
            trans_subquery (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selected_fields ((kind, body) : mt) : CST.selected_fields =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_selectable_expression (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_selectable_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_set_comparison ((kind, body) : mt) : CST.set_comparison =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_set_comparison_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Subq (
                  trans_subquery (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_choice_soql_lit_rep_COMMA_choice_soql_lit_RPAR (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Soql_lit (
                              trans_soql_literal (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Bound_apex_exp (
                              trans_bound_apex_expression (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `Soql_lit (
                                        trans_soql_literal (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Bound_apex_exp (
                                        trans_bound_apex_expression (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sobject_return ((kind, body) : mt) : CST.sobject_return =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_selected_fields (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_using_clause (Run.matcher_token v))
                        v2
                      ,
                      Run.opt
                        (fun v -> trans_where_clause (Run.matcher_token v))
                        v3
                      ,
                      Run.opt
                        (fun v -> trans_order_by_clause (Run.matcher_token v))
                        v4
                      ,
                      Run.opt
                        (fun v -> trans_limit_clause (Run.matcher_token v))
                        v5
                      ,
                      Run.opt
                        (fun v -> trans_offset_clause (Run.matcher_token v))
                        v6
                      ,
                      Run.trans_token (Run.matcher_token v7)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_soql_query ((kind, body) : mt) : CST.soql_query =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (trans_soql_query_body (Run.matcher_token v0))
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_soql_query_body ((kind, body) : mt) : CST.soql_query_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9; v10; v11] ->
          (
            trans_select_clause (Run.matcher_token v0),
            trans_from_clause (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_soql_using_clause (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_where_clause (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_soql_with_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_group_by_clause (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_order_by_clause (Run.matcher_token v))
              v6
            ,
            Run.opt
              (fun v -> trans_limit_clause (Run.matcher_token v))
              v7
            ,
            Run.opt
              (fun v -> trans_offset_clause (Run.matcher_token v))
              v8
            ,
            Run.opt
              (fun v -> trans_for_clause (Run.matcher_token v))
              v9
            ,
            Run.opt
              (fun v -> trans_update_clause (Run.matcher_token v))
              v10
            ,
            Run.opt
              (fun v -> trans_all_rows_clause (Run.matcher_token v))
              v11
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sosl_query ((kind, body) : mt) : CST.sosl_query =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (trans_sosl_query_body (Run.matcher_token v0))
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sosl_query_body ((kind, body) : mt) : CST.sosl_query_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_find_clause (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_in_clause (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v -> trans_returning_clause (Run.matcher_token v))
                  v
              )
              v2
            ,
            Run.opt
              (fun v ->
                Run.repeat
                  (fun v -> trans_sosl_with_clause (Run.matcher_token v))
                  v
              )
              v3
            ,
            Run.opt
              (fun v -> trans_limit_clause (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_offset_clause (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_update_clause (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sosl_with_clause ((kind, body) : mt) : CST.sosl_with_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_1618b1a (Run.matcher_token v0),
            trans_sosl_with_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sosl_with_type ((kind, body) : mt) : CST.sosl_with_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `With_data_cat_exp (
            trans_with_data_cat_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `With_divi_exp (
            trans_with_division_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `With_high (
            trans_with_highlight (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `With_meta_exp (
            trans_with_metadata_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `With_netw_exp (
            trans_with_network_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `With_pric_exp (
            trans_with_pricebook_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `With_snip_exp (
            trans_with_snippet_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `With_spell_corr_exp (
            trans_with_spell_correction_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement ((kind, body) : mt) : CST.statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Decl (
            trans_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exp_stmt (
            trans_expression_statement (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Labe_stmt (
            trans_labeled_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `If_stmt (
            trans_if_statement (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `While_stmt (
            trans_while_statement (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `For_stmt (
            trans_for_statement (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Enha_for_stmt (
            trans_enhanced_for_statement (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Blk (
            trans_block (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `SEMI (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Do_stmt (
            trans_do_statement (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Brk_stmt (
            trans_break_statement (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Cont_stmt (
            trans_continue_statement (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Ret_stmt (
            trans_return_statement (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Switch_exp (
            trans_switch_expression (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Local_var_decl (
            trans_local_variable_declaration (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Throw_stmt (
            trans_throw_statement (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Try_stmt (
            trans_try_statement (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Run_as_stmt (
            trans_run_as_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_static_initializer ((kind, body) : mt) : CST.static_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_068a1b3 (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subquery ((kind, body) : mt) : CST.subquery =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_soql_query_body (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_superclass ((kind, body) : mt) : CST.superclass =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_862500c (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_block ((kind, body) : mt) : CST.switch_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_switch_rule (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_expression ((kind, body) : mt) : CST.switch_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_dad77c5 (Run.matcher_token v0),
            trans_pat_0fd6b76 (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            trans_switch_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_label ((kind, body) : mt) : CST.switch_label =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_06b4797 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Opt_unan_type_id_rep_COMMA_opt_unan_type_id (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.opt
                          (fun v -> trans_unannotated_type (Run.matcher_token v))
                          v0
                        ,
                        trans_identifier (Run.matcher_token v1),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.opt
                                    (fun v -> trans_unannotated_type (Run.matcher_token v))
                                    v1
                                  ,
                                  trans_identifier (Run.matcher_token v2)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Lit_rep_COMMA_lit (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_literal (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_literal (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Pat_b4abcb1 (
                  trans_pat_b4abcb1 (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_rule ((kind, body) : mt) : CST.switch_rule =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_switch_label (Run.matcher_token v0),
            trans_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_6533f64 (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_trigger_body ((kind, body) : mt) : CST.trigger_body =
  match body with
  | Children v ->
      trans_block (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_trigger_declaration ((kind, body) : mt) : CST.trigger_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            trans_pat_f300483 (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            trans_pat_0fd6b76 (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            trans_trigger_event (Run.matcher_token v5),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_trigger_event (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.trans_token (Run.matcher_token v7),
            trans_trigger_body (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_ba29bfc (Run.matcher_token v0),
            trans_block (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Rep1_catch_clause (
                  Run.repeat1
                    (fun v -> trans_catch_clause (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Rep_catch_clause_fina_clause (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat
                          (fun v -> trans_catch_clause (Run.matcher_token v))
                          v0
                        ,
                        trans_finally_clause (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Unan_type (
            trans_unannotated_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Anno_type (
            trans_annotated_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_type_ (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_ (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_bound ((kind, body) : mt) : CST.type_bound =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_862500c (Run.matcher_token v0),
            trans_type_ (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_list ((kind, body) : mt) : CST.type_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_type_ (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter ((kind, body) : mt) : CST.type_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.repeat
              (fun v -> trans_annotation (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_bound (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameters ((kind, body) : mt) : CST.type_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_parameter (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unannotated_type ((kind, body) : mt) : CST.unannotated_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_void_type (
            (match v with
            | Alt (0, v) ->
                `Void_type (
                  trans_void_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_type (
                  trans_integral_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Floa_point_type (
                  trans_floating_point_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool_type (
                  trans_boolean_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `DASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `BANG_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `TILDE_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unqualified_object_creation_expression ((kind, body) : mt) : CST.unqualified_object_creation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_5ae1624 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_arguments (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Void_type (
                  trans_void_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_type (
                  trans_integral_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Floa_point_type (
                  trans_floating_point_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Bool_type (
                  trans_boolean_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Scoped_type_id (
                  trans_scoped_type_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_argument_list (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_class_body (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_PLUSPLUS (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_DASHDASH (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `PLUSPLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `DASHDASH_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_comparison ((kind, body) : mt) : CST.value_comparison =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_value_comparison_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Soql_lit (
                  trans_soql_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_expression ((kind, body) : mt) : CST.value_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Func_exp (
            trans_function_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Field_id (
            trans_field_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declarator ((kind, body) : mt) : CST.variable_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_variable_declarator_id (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Array_init (
                            trans_array_initializer (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declarator_list ((kind, body) : mt) : CST.variable_declarator_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_variable_declarator (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_where_clause ((kind, body) : mt) : CST.where_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_41486aa (Run.matcher_token v0),
            trans_boolean_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_1137973 (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_with_division_expression ((kind, body) : mt) : CST.with_division_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_65f3c46 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Bound_apex_exp (
                  trans_bound_apex_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Str_lit (
                  trans_string_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_with_network_expression ((kind, body) : mt) : CST.with_network_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_e0568e7 (Run.matcher_token v0),
            trans_comparison (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_parser_output ((kind, body) : mt) : CST.parser_output =
  match body with
  | Children v ->
      Run.repeat
        (fun v -> trans_declaration (Run.matcher_token v))
        v
  | Leaf _ -> assert false







let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_parser_output matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

